<?xml version="1.0" ?>
<project default="default" name="VoltDB">

<!-- GENERAL HELPER MACROS -->
<macrodef name="envdefault">
    <attribute name="prop" />
    <attribute name="var" />
    <attribute name="default" />
    <sequential>
        <condition property="@{prop}" value="${env.@{var}}" else="@{default}">
            <isset property="env.@{var}" />
        </condition>
    </sequential>
</macrodef>

<macrodef name="invoke-javac">
    <attribute name="srcdir"/>
    <attribute name="destdir" default="${build.prod.dir}"/>
    <attribute name="excludes" default=""/>
    <attribute name="includes" default=""/>
    <sequential>
        <javac
            target="1.6"
            source="1.6"
            srcdir="@{srcdir}"
            destdir="@{destdir}"
            excludes="@{excludes}"
            includes="@{includes}"
            encoding='UTF-8'
            debug='true'
            includeAntRuntime='false'>
            <classpath refid="project.classpath" />
        </javac>
    </sequential>
</macrodef>

<!-- PATHS AND PROPERTIES -->

<tstamp/>

<!-- make environment var foo available as env.foo -->
<property environment="env"/>

<!-- allow env.VOLTBUILD to override "build" property -->
<envdefault prop="build" var="VOLTBUILD" default="release" />

<!-- allow env.VOLTPRO to override "voltpro" property -->
<condition property="voltpro" value="${env.VOLTPRO}">
    <isset property="env.VOLTPRO"/>
</condition>

<!-- stub the voltpro classpath and src.dir fileset so a fileset with this id always exists -->
<fileset id="voltpro.classpath" file="." excludes="**"/>
<fileset id="voltpro.src.dir" file="." excludes="**"/>

<!-- import the pro build.xml if it exists and is requested -->
<import file="${voltpro}/build.xml" optional="true"/>

<property name='base.dir'                   location='.' />
<property name='build.dir'                   location='obj/${build}' />
<property name='build.prod.dir'              location='${build.dir}/prod' />
<property name='build.test.dir'              location='${build.dir}/test' />
<property name='build.admin.dir'             location='${build.dir}/admin' />
<property name='raw.dist.dir'                location='${build.dir}' />
<property name='dist.dir'                    location='${build.dir}/dist' />
<property name='dist.examples.dir'           location='${dist.dir}/examples' />
<property name='doc.dir'                     location='doc' />
<property name='src.gpl.dir'                 location='src/frontend' />
<property name='src.hsqldb.dir'              location='src/hsqldb19b3' />
<property name='src.test.dir'                location='tests/frontend' />
<property name='src.hsqldb.test.dir'         location='tests/hsqldb' />
<property name='src.studio.dir'              location='src/frontend/org/voltdb/studio' />
<property name='build.testoutput.dir'        location='${build.dir}/testoutput' />
<property name='build.testobjects.dir'       location='${build.dir}/testobjects' />
<property name='lib.dir'                     location='lib' />
<property name='vendor.lib.dir'              location='third_party/java/jars' />
<property name='vendor.src.dir'              location='third_party/java/src'  />
<property name='src.ee.parent.dir'           location='src/ee' />
<property name='src.ee.dir'                  location='src/ee' />
<property name='src.catalog.dir'             location='src/catgen' />
<property name='depcache'                    value='.depcache' />
<property name='project.parsergen.dir'       location='${src.gpl.dir}/org/voltdb/compiler/projectfile' />
<property name='project.parsergen.pkg'       value='org.voltdb.compiler.projectfile' />
<property name='project.parsergen.xsd'       value='org/voltdb/compiler/ProjectFileSchema.xsd' />
<property name='deployment.parsergen.dir'    location='${src.gpl.dir}/org/voltdb/compiler/deploymentfile' />
<property name='deployment.parsergen.pkg'    value='org.voltdb.compiler.deploymentfile' />
<property name='deployment.parsergen.xsd'    value='org/voltdb/compiler/DeploymentFileSchema.xsd' />
<property name='debian.package.dir'          value='obj/debian' />

<!-- os.mac is set when build is running on Mac OSX -->
<condition property="os.mac">
    <os family="mac"/>
</condition>

<!-- emma build instrumentation location -->
<property name='build.instr.dir'             location='${build.dir}/instr' />

<!-- Default heap size for Volt server (MB)  -->
<condition property="volt.server.memory" value="2048">
    <not><isset property="volt.server.memory"/></not>
</condition>

<!-- Default heap size for Volt clients+loaders (MB)  -->
<condition property="volt.client.memory" value="2048">
    <not><isset property="volt.client.memory"/></not>
</condition>

<!-- Overridden in the Hudson test script. -->
<property name='junit.haltonfailure'    value='false' />
<property name="j2se_api" value="http://download.oracle.com/javase/6/docs/api/"/>

<path id='project.classpath'>
    <pathelement location='${build.instr.dir}' />
    <pathelement location='${build.prod.dir}' />
    <pathelement location='${build.test.dir}' />
    <fileset dir='${lib.dir}'>
        <include name='*.jar' />
    </fileset>
    <fileset dir='${vendor.lib.dir}'>
        <include name='*.jar' />
        <exclude name='ant.jar' />
    </fileset>
    <pathelement path="${java.class.path}"/>
    <fileset refid="voltpro.classpath"/>
</path>

<!-- Workload Tracer Properties -->
<condition property="workload.trace.class" value="">
    <not><isset property="workload.trace.class"/></not>
</condition>
<condition property="workload.trace.path" value="">
    <not><isset property="workload.trace.path"/></not>
</condition>
<condition property="workload.trace.ignore" value="">
    <not><isset property="workload.trace.ignore"/></not>
</condition>

<!--
***************************************
PRIMARY ENTRY POINTS
***************************************
-->

<target name="default"
    depends="compile, ee, voltdb.jar"
    description="Compile Java classes and C++ JNI library."
/>
<target name="check"
    depends="licensecheck, compile, voltdbipc"
    description="Run Java and C++ JNI testcases." >
    <condition property="timeoutLength" value="${timeoutLength}" else='1800000'>
        <isset property="timeoutLength"/>
    </condition>

    <exec executable="/usr/bin/ant" failonerror="true" timeout="9000000">
        <arg value="eecheck" />
        <arg value="junit" />
        <arg value="distcheck" />
        <arg value="pythonfser" />
        <arg value="-Dbuild=${build}" />
        <arg value="-DtimeoutLength=${timeoutLength}" />
        <arg value="-DVOLT_REGRESSIONS=${VOLT_REGRESSIONS}" />
        <arg value="-DVOLT_ENABLEIV2=${VOLT_ENABLEIV2}" />
    </exec>
</target>
<target name="check_noclustering"
    depends="licensecheck, compile, voltdbipc"
    description="Run Java and C++ JNI testcases that apply to a single node." >
    <condition property="timeoutLength" value="${timeoutLength}" else='1800000'>
        <isset property="timeoutLength"/>
    </condition>

    <exec executable="/usr/bin/ant" failonerror="true" timeout="9000000">
        <arg value="eecheck" />
        <arg value="junit_noclustering" />
        <arg value="distcheck" />
        <arg value="pythonfser" />
        <arg value="-Dbuild=${build}" />
        <arg value="-DtimeoutLength=${timeoutLength}" />
        <arg value="-DVOLT_REGRESSIONS=localhsql" />
        <arg value="-DVOLT_ENABLEIV2=${VOLT_ENABLEIV2}" />
    </exec>
</target>
<target name="check_quick"
    depends="compile, voltdbipc"
    description="Run a subset of Java testcases and test fragments." >
    <condition property="timeoutLength" value="${timeoutLength}" else='480000'>
        <isset property="timeoutLength"/>
    </condition>

    <exec executable="/usr/bin/ant" failonerror="true" timeout="1800000">
        <arg value="licensecheck" />
        <arg value="junit_quick" />
        <arg value="distcheck" />
        <arg value="-Dbuild=${build}" />
        <arg value="-DtimeoutLength=${timeoutLength}" />
        <arg value="-DVOLT_REGRESSIONS=${VOLT_REGRESSIONS}" />
        <arg value="-DVOLT_ENABLEIV2=${VOLT_ENABLEIV2}" />
    </exec>
</target>

<target name="quarantine"
    depends="compile, ee"
    description="Run quarantined tests." >
    <condition property="timeoutLength" value="${timeoutLength}" else='480000'>
        <isset property="timeoutLength"/>
    </condition>

    <exec executable="/usr/bin/ant" failonerror="true" timeout="1800000">
        <arg value="junit_quarantine" />
        <arg value="-Dbuild=${build}" />
        <arg value="-DtimeoutLength=${timeoutLength}" />
        <arg value="-DVOLT_REGRESSIONS=${VOLT_REGRESSIONS}" />
        <arg value="-DVOLT_ENABLEIV2=${VOLT_ENABLEIV2}" />
    </exec>
</target>

<target name="killstragglers"
        description="Run the killstragglers script">
    <exec executable="tools/killstragglers.sh"
          failonerror="true" timeout="1800000">
    </exec>
</target>

<target name="all"
    depends="compile, ee, junit, eecheck, javadoc, jars"
    description="Do all tasks."
/>
<target name="jars"
    depends="voltdb.jar, voltdbfat.jar, voltdbclient.jar"
    description="Create production JAR files."
/>
<target name="dist"
    depends="dist_client, dist_internal, dist_voltcache, dist_voltkv, dist_tools"
    description="Create VoltDB release packages with examples and documentation."
/>
<target name="dist_voltcache"  depends="dist_internal"
        description="Create VoltDB release package with VoltCache reference app.">
  <refapp_macro appname="voltcache" />
</target>

<target name="dist_voltkv" depends="dist_internal"
        description="Create VoltDB release package with VoltKV reference app.">
  <refapp_macro appname="voltkv" />
</target>

<target name="dist_refapp" depends="dist_internal"
        description="Create reference application release package with app supplied in ant invocation.">
  <fail unless="appname" message="must specify an app name with -Dappname=" />
  <refapp_macro appname="${appname}" />
</target>

<target name="dist_tools" depends="buildinfo"
        description="Create VoltDB tools release package.">
    <exec executable="${base.dir}/bin/voltadmin">
        <arg line="package -f -o ${dist.dir}-tools" />
    </exec>
    <mkdir dir="${raw.dist.dir}/voltdb-tools-${dist.version}" />
    <copy todir="${raw.dist.dir}/voltdb-tools-${dist.version}">
        <fileset dir="${dist.dir}">
            <include name="LICENSE" />
        </fileset>
        <fileset dir="${dist.dir}-tools" defaultexcludes="yes">
            <include name="*" />
        </fileset>
    </copy>
    <exec executable="tar" failonerror="true">
        <arg value="-cz"/>
        <arg value="-C"/>
        <arg value="${raw.dist.dir}"/>
        <arg value="-f"/>
        <arg value="${raw.dist.dir}/voltdb-tools-${dist.version}.tar.gz"/>
        <arg value="voltdb-tools-${dist.version}"/>
    </exec>
    <exec dir='.' executable='/bin/sh'>
        <arg line="-c 'rm -rfv ${raw.dist.dir}/voltdb-tools-${dist.version}'"/>
    </exec>
</target>

<!--
***************************************
DISTRIBUTION
***************************************
-->

<target name="javadoc">
    <!-- populate selected server/compiler javadoc documentation -->
    <javadoc
        destdir="doc/javadoc/procedure-api"
        Public="true"
        version="true"
        use="true"
        nodeprecated="true"
        Overview='${src.gpl.dir}/overview-public.html'
        Windowtitle='VoltDB Server APIs'>
        <link href="${j2se_api}"/>
        <classpath refid='project.classpath' />
        <fileset dir="." defaultexcludes="yes">
            <include name="src/frontend/org/voltdb/VoltTable.java" />
            <include name="src/frontend/org/voltdb/VoltTableRow.java" />
            <include name="src/frontend/org/voltdb/VoltProcedure.java" />
            <include name="src/frontend/org/voltdb/SQLStmt.java" />
            <include name="src/frontend/org/voltdb/VoltType.java" />
            <include name="src/frontend/org/voltdb/ProcInfo.java" />
            <include name="src/frontend/org/voltdb/types/TimestampType.java" />
        </fileset>
    </javadoc>

    <!-- populate selected client javadoc documentation -->
    <javadoc
        destdir="doc/javadoc/java-client-api"
        access="protected"
        version="true"
        use="true"
        nodeprecated="true"
        Overview='${src.gpl.dir}/overview-public.html'
        Windowtitle='VoltDB Client APIs'>
        <link href="${j2se_api}"/>
        <classpath refid='project.classpath' />
        <fileset dir="." defaultexcludes="yes">
            <include name="src/frontend/org/voltdb/VoltTable.java" />
            <include name="src/frontend/org/voltdb/VoltTableRow.java" />
            <include name="src/frontend/org/voltdb/VoltClient.java" />
            <include name="src/frontend/org/voltdb/VoltType.java" />
            <include name="src/frontend/org/voltdb/client/Client.java" />
            <include name="src/frontend/org/voltdb/client/NoConnectionsException.java" />
            <include name="src/frontend/org/voltdb/client/ProcedureCallback.java" />
            <include name="src/frontend/org/voltdb/client/ClientConfig.java" />
            <include name="src/frontend/org/voltdb/client/ClientFactory.java" />
            <include name="src/frontend/org/voltdb/client/SyncCallback.java" />
            <include name="src/frontend/org/voltdb/client/NullCallback.java" />
            <include name="src/frontend/org/voltdb/client/ProcCallException.java" />
            <include name="src/frontend/org/voltdb/client/ClientStatusListener.java" />
            <include name="src/frontend/org/voltdb/client/ClientStatusListenerExt.java" />
            <include name="src/frontend/org/voltdb/client/ClientResponse.java" />
            <include name="src/frontend/org/voltdb/client/ClientStats.java" />
            <include name="src/frontend/org/voltdb/client/ClientStatsContext.java" />
            <include name="src/frontend/org/voltdb/types/TimestampType.java" />
        </fileset>
    </javadoc>
</target>

<target name="dist_internal" depends="compile, ee, javadoc, voltdb.jar, voltdbclient.jar">
    <!-- prepare release directory for new content -->
    <delete includeemptydirs="true" failonerror='false'>
        <fileset dir="${dist.dir}" includes="**/*" />
    </delete>
    <mkdir dir="${dist.dir}" />

    <!-- populate the doc dir -->
    <copy todir="${dist.dir}/">
        <fileset dir="." defaultexcludes="yes">
            <include name="Click Here to Start.html"/>
            <include name="README"/>
            <include name="README.thirdparty"/>
            <include name="LICENSE"/>
            <include name="bin/**"/>
            <include name="doc/**"/>
            <include name="examples/**"/>
            <include name="lib/**"/>
            <include name="tools/demo/**"/>
            <include name="voltdb/**"/>
            <exclude name=".gitignore"/>
        </fileset>
    </copy>

    <antcall target="copy_pro_bin"/>

    <!-- populate java and native libraries -->
    <copy todir="${dist.dir}/voltdb" flatten="true" >
        <fileset dir="voltdb" defaultexcludes="yes">
            <include name="voltdb-${dist.version}.jar" />
            <include name="voltdb-${dist.version}-javadoc.jar" />
            <include name="voltdbclient-${dist.version}.jar" />
            <include name="voltdbclient-${dist.version}-javadoc.jar" />
        </fileset>
    </copy>
    <copy todir="${dist.dir}/voltdb" flatten="true" >
        <fileset dir="${build.dir}" defaultexcludes="yes">
            <include name="nativelibs/libvoltdb*" />
        </fileset>
    </copy>
    <copy todir="${dist.dir}/voltdb" flatten="true" >
        <fileset dir="." defaultexcludes="yes">
            <include name="third_party/cpp/jnilib/libjzmq*" />
        </fileset>
    </copy>

    <!-- OS-specific preparation of libvoltdb* -->
    <antcall target="dist_libvoltdb" />

    <!-- copy studio.web -->
    <mkdir dir="${dist.dir}/tools/studio.web" />
    <copy todir="${dist.dir}/tools/studio.web">
        <fileset dir="${src.gpl.dir}/org/voltdb/studio" defaultexcludes="yes">
            <include name="**"/>
        </fileset>
    </copy>

    <!-- add the Project and Deployment file schemas to the dist -->
    <copy todir="${dist.dir}/tools" file="src/frontend/org/voltdb/compiler/ProjectFileSchema.xsd"/>
    <copy todir="${dist.dir}/tools" file="src/frontend/org/voltdb/compiler/DeploymentFileSchema.xsd"/>

    <!-- copy license to voltdb dir -->
    <copy todir="${dist.dir}/voltdb" file="LICENSE"/>

    <!-- make shell scripts executable -->
    <chmod perm="ugo+rx">
        <fileset dir="${dist.dir}" defaultexcludes="yes">
            <include name="bin/*"/>
            <include name="tools/demo/launch"/>
            <include name="doc/tutorials/**/run.sh"/>
            <include name="examples/**/run.sh"/>
        </fileset>
    </chmod>

    <!-- create an archive for distribution -->
    <exec executable="mv" failonerror="true">
        <arg value="${raw.dist.dir}/dist"/>
        <arg value="${raw.dist.dir}/voltdb-${dist.version}"/>
    </exec>
    <exec executable="tar" failonerror="true">
        <arg value="-cz"/>
        <arg value="-C"/>
        <arg value="${raw.dist.dir}"/>
        <arg value="-f"/>
        <arg value="${raw.dist.dir}/voltdb-${dist.version}.tar.gz"/>
        <arg value="voltdb-${dist.version}"/>
    </exec>
    <!-- move it back to dist directory for downstream dependencies -->
    <exec executable="mv" failonerror="true">
        <arg value="${raw.dist.dir}/voltdb-${dist.version}"/>
        <arg value="${raw.dist.dir}/dist"/>
    </exec>

    <!-- package up studio web trivially -->
    <zip destfile="${raw.dist.dir}/voltdb-studio.web-${dist.version}.zip">
        <fileset dir="${src.studio.dir}" defaultexcludes="yes">
            <include name="**/*" />
        </fileset>
    </zip>
</target>

<target name="dist_client" depends="dist_internal"
        description="Hacky Java client package target">
    <!-- prepare release directory for new content -->
    <delete includeemptydirs="true" failonerror='false'>
        <fileset dir="${dist.dir}-client-java" includes="**/*" />
    </delete>
    <mkdir dir="${dist.dir}-client-java" />

    <!-- populate the dist-client-java dir from the superset dist -->
    <copy todir="${dist.dir}-client-java/">
        <fileset dir="${dist.dir}/" defaultexcludes="yes">
            <include name="**/*"/>
            <exclude name=".gitignore"/>
            <include name="bin/sqlcmd"/>
            <exclude name="voltdb/libvoltdb*"/>
            <exclude name="voltdb/voltdb-*.jar"/>
            <exclude name="voltdb/libjzmq*"/>
        </fileset>
    </copy>

    <!-- make shell scripts executable -->
    <chmod perm="ugo+rx">
        <fileset dir="${dist.dir}-client-java/" defaultexcludes="yes">
            <include name="tools/demo/launch"/>
            <include name="doc/tutorials/auction/run.sh"/>
            <include name="doc/tutorials/helloworld/run.sh"/>
            <include name="examples/voltcache/run.sh"/>
            <include name="examples/voltkv/run.sh"/>
            <include name="examples/voter/run.sh"/>
            <include name="bin/sqlcmd"/>
        </fileset>
    </chmod>

    <!-- create an archive for distribution -->
    <exec executable="mv" failonerror="true">
        <arg value="${raw.dist.dir}/dist-client-java"/>
        <arg value="${raw.dist.dir}/voltdb-client-java-${dist.version}"/>
    </exec>
    <exec executable="tar" failonerror="true">
        <arg value="-cz"/>
        <arg value="-C"/>
        <arg value="${raw.dist.dir}"/>
        <arg value="-f"/>
        <arg value="${raw.dist.dir}/voltdb-client-java-${dist.version}.tar.gz"/>
        <arg value="voltdb-client-java-${dist.version}"/>
    </exec>
    <!-- move it back to dist directory for downstream dependencies -->
    <exec executable="mv" failonerror="true">
        <arg value="${raw.dist.dir}/voltdb-client-java-${dist.version}"/>
        <arg value="${raw.dist.dir}/dist-client-java"/>
    </exec>
</target>

<!-- Prepare libvoltdb* for distribution. -->
<target name="dist_libvoltdb" depends="dist_libvoltdb_linux, dist_libvoltdb_mac" />

<!-- Linux prepare libvoltdb* for distribution. -->
<target name="dist_libvoltdb_linux" unless="os.mac">

    <!-- save the symbols from the shared library -->
    <exec dir='${dist.dir}/voltdb' executable='/bin/sh'>
        <arg line="-c '/usr/bin/objcopy --only-keep-debug libvoltdb-${dist.version}.so ${build.dir}/voltdb-${dist.version}.sym'" />
    </exec>

    <!-- strip the voltbin shared library (~40x size reduction) -->
    <exec dir='${dist.dir}/voltdb' executable='/bin/sh'>
        <arg line="-c '/usr/bin/strip --strip-debug --strip-unneeded libvoltdb*'"/>
    </exec>

    <!-- embed the path to the symbol file into the ELF binary -->
    <exec dir='${dist.dir}/voltdb' executable='/bin/sh'>
        <arg line="-c '/usr/bin/objcopy --add-gnu-debuglink=voltdb-${dist.version}.sym libvoltdb-${dist.version}.so'" />
    </exec>

</target>

<!-- Mac prepare libvoltdb* for distribution. -->
<target name="dist_libvoltdb_mac" if="os.mac">
    <!-- objcopy is unavailable by default on Mac -->

    <!-- Just use strip -S since strip-unneeded option is unavailable. -->
    <exec dir='${dist.dir}/voltdb' executable='/bin/sh'>
        <arg line="-c '/usr/bin/strip -S libvoltdb*'"/>
    </exec>
</target>

<macrodef name="refapp_macro"
        description="Build a kit that only includes a single reference app">
  <attribute name="appname"/>
  <sequential>

    <!-- prepare release directory for new content -->
    <delete includeemptydirs="true" failonerror='false'>
        <fileset dir="${dist.dir}-@{appname}" includes="**/*" />
    </delete>
    <mkdir dir="${dist.dir}-@{appname}" />
    <mkdir dir="${dist.dir}-@{appname}/@{appname}" />

    <!-- populate the examples -->
    <copy todir="${dist.dir}-@{appname}/@{appname}">
        <fileset dir="${dist.dir}/examples/@{appname}" defaultexcludes="yes">
            <include name="**/*"/>
            <exclude name=".gitignore"/>
        </fileset>
    </copy>

    <!-- populate the bin/lib/voltdb/etc... dirs -->
    <copy todir="${dist.dir}-@{appname}" >
        <fileset dir="${dist.dir}" defaultexcludes="yes">
            <include name="README" />
            <include name="LICENSE" />
            <include name="README.thirdparty" />
            <include name="voltdb/**" />
            <include name="lib/**" />
            <include name="bin/**" />
        </fileset>
    </copy>

    <!-- rewrite the run.sh script's relative directories -->
    <replace
        file="${dist.dir}-@{appname}/@{appname}/run.sh"
        token="../../"
        value="../"/>

    <!-- make shell scripts executable -->
    <chmod perm="ugo+rx">
        <fileset dir="${dist.dir}-@{appname}" defaultexcludes="yes">
            <include name="bin/*"/>
            <include name="@{appname}/run.sh"/>
        </fileset>
    </chmod>



    <!-- create an archive for distribution -->
    <exec executable="mv" failonerror="true">
        <arg value="${raw.dist.dir}/dist-@{appname}"/>
        <arg value="${raw.dist.dir}/voltdb-@{appname}-${dist.version}"/>
    </exec>
    <exec executable="tar" failonerror="true">
        <arg value="-cz"/>
        <arg value="-C"/>
        <arg value="${raw.dist.dir}"/>
        <arg value="-f"/>
        <arg value="${raw.dist.dir}/voltdb-@{appname}-${dist.version}.tar.gz"/>
        <arg value="voltdb-@{appname}-${dist.version}"/>
    </exec>
    <!-- move it back to dist directory for downstream dependencies -->
    <exec executable="mv" failonerror="true">
        <arg value="${raw.dist.dir}/voltdb-@{appname}-${dist.version}"/>
        <arg value="${raw.dist.dir}/dist-@{appname}"/>
    </exec>
  </sequential>
</macrodef>

<!--
***************************************
CLEANING
***************************************
-->

<target name='clean'
	description="Remove all compiled and generated files."
	depends="cleantmp, clean_project_gen, clean_deployment_gen, clean_debian_package">
  <exec dir='examples/voter' executable='/usr/bin/env'><arg line="bash run.sh clean"/></exec>
  <exec dir='examples/voltcache' executable='/usr/bin/env'><arg line="bash run.sh clean"/></exec>
  <exec dir='examples/voltkv' executable='/usr/bin/env'><arg line="bash run.sh clean"/></exec>
  <exec dir='doc/tutorials/auction' executable='/usr/bin/env'><arg line="bash run.sh clean"/></exec>
  <exec dir='doc/tutorials/helloworld' executable='/usr/bin/env'><arg line="bash run.sh clean"/></exec>  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf obj/*'"/>
  </exec>
  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf voltdb/*.jar'"/>
  </exec>
  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf voltdb/*.so voltdb/*.jnilib'"/>
  </exec>
  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf src/ee/catalog/*'"/>
  </exec>
  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf src/frontend/org/voltdb/catalog/*.java'"/>
  </exec>
  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf *.jar'"/>
  </exec>
  <exec dir='.' executable='/bin/sh'>
    <arg line="-c 'rm -rf doc/javadoc/procedure-api/* doc/javadoc/java-client-api/*'"/>
  </exec>

</target>

<target name='cleantmp' description="Remove all data files Volt generated in /tmp.">
  <exec dir='.' executable='/bin/sh' failonerror='false'>
    <arg line="-c 'rm -rf /tmp/myApp*.tmp *.vpt *.digest'"/>
  </exec>
</target>

<!--
***************************************
JAR BUILDING
***************************************
-->

<target name="buildinfo">
  <loadfile property='dist.version' srcFile='version.txt'>
      <filterchain><striplinebreaks/></filterchain>
  </loadfile>
  <exec dir="." executable="tools/getgitinfo.py">
      <arg line='${dist.version}' />
  </exec>
</target>

<target name="voltdb.jar" depends="compile, buildinfo">
    <jar destfile="voltdb/voltdb-${dist.version}.jar">
        <fileset dir="${build.prod.dir}" defaultexcludes="yes" >
            <include name="org/voltdb/**"/>
            <include name="org/voltcore/**"/>
            <include name="org/hsqldb_voltpatches/**" />
            <include name="org/apache/**" />
            <include name="jsr166y/**"/>
            <include name="org/eclipse/jetty_voltpatches/**" />
            <include name="javax/servlet_voltpatches/**" />
            <include name="au/com/bytecode/opencsv_voltpatches/**" />
            <include name="org/hsqldb_voltpatches/**" />
            <include name="org/json_voltpatches/**" />
            <include name="org/mindrot/**" />
            <include name="org/spearce_voltpatches/**" />
        </fileset>
        <fileset dir="${build.test.dir}" defaultexcludes="yes" >
            <include name="org/voltdb/ServerThread.class" />
            <include name="org/voltdb/benchmark/*" />
            <include name="org/voltdb/regressionsuites/Local*" />
            <include name="org/voltdb/regressionsuites/MultiConfigSuiteBuilder.class" />
            <include name="org/voltdb/regressionsuites/RegressionSuite.class" />
            <include name="org/voltdb/regressionsuites/VoltServerConfig.class" />
        </fileset>
        <fileset dir="."><include name="buildstring.txt"/></fileset>
        <manifest>
            <section name="Credits">
                <attribute name="Author" value="VoltDB Inc." />
            </section>
            <section name="Shared">
                <attribute
                    name="Title"
                    value="VoltDB compiler, server, and client interface libraries"
                />
                <attribute name="Date" value="${TODAY}" />
            </section>
        </manifest>
    </jar>
    <!--jar destfile="voltdb/voltdb-${dist.version}-javadoc.jar">
        <fileset dir="${doc.dir}/javadoc/procedure-api" defaultexcludes="no" >
            <include name="**"/>
        </fileset>
        <manifest>
            <section name="Credits">
                <attribute name="Author" value="VoltDB Inc." />
            </section>
            <section name="Shared">
                <attribute
                    name="Title"
                    value="VoltDB Database JavaDoc"
                />
                <attribute name="Date" value="${TODAY}" />
            </section>
        </manifest>
    </jar>
    <jar destfile="voltdb/voltdbclient-${dist.version}-javadoc.jar">
        <fileset dir="${doc.dir}/javadoc/java-client-api" defaultexcludes="no" >
            <include name="**"/>
        </fileset>
        <manifest>
            <section name="Credits">
                <attribute name="Author" value="VoltDB Inc." />
            </section>
            <section name="Shared">
                <attribute
                    name="Title"
                    value="VoltDB Client JavaDoc"
                />
                <attribute name="Date" value="${TODAY}" />
            </section>
        </manifest>
    </jar-->

</target>

<target name="voltdbclient.jar" depends="compile, buildinfo">
    <jar destfile="voltdb/voltdbclient-${dist.version}.jar">
        <fileset dir="${build.prod.dir}" defaultexcludes="yes" >
            <include name="org/voltcore/**" />
            <include name="org/voltdb/**" />
            <include name="org/json_voltpatches/**" />
            <include name="org/apache/hadoop_voltpatches/**" />
        </fileset>
        <fileset dir="."><include name="buildstring.txt"/></fileset>
        <manifest>
            <section name="Credits">
                <attribute name="Author" value="VoltDB Inc." />
            </section>
            <section name="Shared">
                <attribute
                    name="Title"
                    value="VoltDB client interface libraries"
                />
                <attribute name="Date" value="${TODAY}" />
            </section>
        </manifest>
    </jar>
</target>

<target name="voltdbthin.jar" depends="compile"
    description="used by testability-explorer">
    <jar destfile="${build.prod.dir}/voltdbthin.jar">
        <fileset dir="${build.prod.dir}" defaultexcludes="yes" >
            <include name="org/voltdb/**" />
        </fileset>
    </jar>
</target>

<target name="voltdbfat.jar" depends="compile, buildinfo">
    <jar destfile="${build.prod.dir}/voltdbfat.jar">
        <fileset dir="${build.prod.dir}" defaultexcludes="yes" >
            <include name="org/voltdb/**" />
            <include name="org/hsqldb_voltpatches/**" />
            <include name="org/eclipse/jetty_voltpatches/**" />
            <include name="org/opencsv_voltpatches/**" />
            <include name="javax/servlet_voltpatches/**" />
            <include name="org/json_voltpatches/**" />
            <include name="org/apache/jute_voltpatches/**" />
            <include name="org/apache/zookeeper_voltpatches/**" />
            <include name="org/apache/spearce_voltpatches/**" />
        </fileset>
        <fileset dir="${build.test.dir}" defaultexcludes="no" >
            <include name="org/voltdb/**" />
        </fileset>
        <fileset dir="${src.gpl.dir}" defaultexcludes="yes" >
            <include name="org/voltdb/**" />
        </fileset>
        <fileset dir="${src.test.dir}" defaultexcludes="yes" >
            <include name="org/voltdb/**" />
        </fileset>
        <fileset dir="."><include name="buildstring.txt"/></fileset>
        <manifest>
            <section name="Credits">
                <attribute name="Author" value="VoltDB Inc." />
            </section>
            <section name="Shared">
                <attribute
                    name="Title"
                    value="VoltDB compiler, server, client and test libraries"
                />
                <attribute name="Date" value="${TODAY}" />
            </section>
        </manifest>
    </jar>
</target>

<!--
***************************************
JAVA COMPILATION
***************************************
-->

<target name="compile" depends="catalog, project_gen, deployment_gen, compile_core, compile_pro"
        description="Compile all Java source and test classes"/>

<target name="compile_core">
    <mkdir dir='${build.prod.dir}' />
    <mkdir dir='${build.test.dir}' />
    <exec
        dir='${src.gpl.dir}/org/voltdb/utils'
        executable='${src.gpl.dir}/org/voltdb/utils/generate_logkeys.py'
        failonerror='true' />
    <depend
        srcdir="${src.hsqldb.dir}:${src.hsqldb.test.dir}:${src.gpl.dir}:${src.test.dir}:${vendor.src.dir}"
        destdir="${build.prod.dir}:${build.test.dir}"
        cache="${depcache}">
        <classpath refid="project.classpath" />
    </depend>

    <!-- copy resources needed for logging messages -->
    <copy todir="${build.prod.dir}">
        <fileset dir="${src.hsqldb.dir}" includes="**/*.properties" />
        <fileset dir="${src.gpl.dir}" includes="**/*.properties"/>
        <fileset dir="${src.gpl.dir}" includes="**/*.xml" />
        <fileset dir="${src.gpl.dir}" includes="**/admintemplate.html" />
    </copy>

    <copy todir='${build.prod.dir}/org/hsqldb_voltpatches/resources'>
        <fileset dir="${src.hsqldb.dir}/org/hsqldb_voltpatches/resources">
            <include name="*"/>
        </fileset>
    </copy>

    <copy todir='${build.prod.dir}/org/voltdb/studio'>
        <fileset dir="${src.gpl.dir}/org/voltdb/studio">
            <include name="**"/>
        </fileset>
    </copy>

    <!-- README files we want to include in the jar -->
    <copy flatten='false' todir='${build.prod.dir}'>
        <fileset dir="${src.gpl.dir}">
           <include name="**/*Readme.txt"/>
        </fileset>
    </copy>

    <!-- pick src//** schemas as package resources -->
    <copy flatten='false' todir="${build.prod.dir}">
        <fileset dir="${src.gpl.dir}">
            <include name="**/*.xsd"/>
        </fileset>
    </copy>

    <!-- the ddl files used by tests and benchmark clients are copied
         relative to the client class and found with class.getResource() -->
    <copy flatten='false' todir='${build.test.dir}'>
        <fileset dir="${src.test.dir}">
            <include name="**/*.sql"/>
        </fileset>
    </copy>

    <!-- Compressed resources for tests -->
    <copy flatten='false' todir='${build.test.dir}'>
        <fileset dir="${src.test.dir}">
            <include name="**/*.tar.gz"/>
        </fileset>
    </copy>

    <!-- copy file containing workloads for voltdbfat.jar -->
    <copy flatten='false' todir='${build.test.dir}'>
        <fileset dir="${src.test.dir}">
            <include name="**/microbench.xml"/>
        </fileset>
    </copy>

    <copy todir='${build.test.dir}/org/hsqldb_voltpatches'>
        <fileset dir="${src.hsqldb.test.dir}/org/hsqldb_voltpatches">
            <include name="*.sql"/>
        </fileset>
    </copy>

    <!-- copy zmq to voltdb dir / would be nice to only copy the right one -->
    <copy todir="voltdb" flatten="true" >
        <fileset dir="." defaultexcludes="yes">
            <include name="third_party/cpp/jnilib/libjzmq*" />
        </fileset>
    </copy>

    <!-- compile the individual source directories -->
    <!-- hsql -->
    <invoke-javac srcdir="${src.hsqldb.dir}"/>
    <!-- voltcore and third-party java (including our zookeeper -->
    <invoke-javac
        srcdir="${src.gpl.dir}:${vendor.src.dir}"
        includes="org/voltcore/**/*.java,org/apache/**/*.java
                  au/**/*.java,org/spearce_voltpatches/**/*.java
                  org/json_voltpatches/**/*.java" />
    <!-- non-voltcore voltdb code -->
    <invoke-javac srcdir="${src.gpl.dir}" excludes="org/voltcore/**/*.java" />

    <!-- compile the individual test directories -->
    <invoke-javac srcdir="${src.hsqldb.test.dir}" destdir='${build.test.dir}'/>
    <invoke-javac srcdir="${src.test.dir}" destdir='${build.test.dir}'
        excludes="org/voltdb/benchmark/tpcc/JDBCClient.java"/>
</target>

<!-- This task only executes if the voltpro.flavor property is set. -->
<target name="compile_pro" if="voltpro.flavor">
  <antcall target="voltpro.compile"/>
</target>

<target name="copy_pro_bin" if="voltpro.flavor">
  <copy todir="${dist.dir}/">
    <fileset dir="${voltpro.basedir}" includes="bin/**"/>
  </copy>
</target>


<!--
***************************************
NATIVE EE STUFF
***************************************
-->

<target name='catalog' description="Generate catalog source code.">
  <exec dir="${src.catalog.dir}" executable='python' failonerror='true'>
    <arg line="catalog.py"/>
  </exec>
  <exec dir="${src.catalog.dir}" executable='python' failonerror='true'>
    <arg line="install.py"/>
  </exec>
</target>

<target name='jnicompile'
    depends='compile, jnicompile_temp, uptodate_jni_h.check'
    description="Build C++ JNI library."
    unless='uptodate_jni_h'>
    <delete file="${src.ee.dir}/org_voltdb_jni_ExecutionEngine.h" />
    <delete file="${src.ee.dir}/org_voltcore_utils_DBBPool.h" />
    <move
        file='${build.dir}/org_voltdb_jni_ExecutionEngine.h'
        todir='${src.ee.dir}'
    />
    <move
        file='${build.dir}/org_voltcore_utils_DBBPool.h'
        todir='${src.ee.dir}'
    />
</target>

<target name='uptodate_jni_h.check' depends='jnicompile_temp'>
    <condition property='uptodate_jni_h'>
        <and>
            <filesmatch
                file1="${src.ee.dir}/org_voltdb_jni_ExecutionEngine.h"
                file2="${build.dir}/org_voltdb_jni_ExecutionEngine.h"
            />
            <filesmatch
                file1="${src.ee.dir}/org_voltcore_utils_DBBPool.h"
                file2="${build.dir}/org_voltcore_utils_DBBPool.h"
            />
        </and>
    </condition>
</target>

<target name='jnicompile_temp'>
    <delete file="${build.dir}/org_voltdb_jni_ExecutionEngine.h"/>
    <delete file="${build.dir}/org_voltcore_utils_DBBPool.h" />
    <javah
        classpathref="project.classpath"
        force="yes"
        verbose="yes"
        class="org.voltdb.jni.ExecutionEngine"
        destdir="${build.dir}"
    />
    <javah
        classpathref="project.classpath"
        force="yes"
        verbose="yes"
        class="org.voltcore.utils.DBBPool"
        destdir="${build.dir}"
    />
</target>

<target name="eecheck" depends="ee"
    description="Run testcases for C++ JNI library.">
    <exec dir='.' executable='python' failonerror='true'>
        <env key="TEST_DIR" value="${build.testobjects.dir}" />
        <env key="EETESTSUITE" value="${eetestsuite}"/>
        <arg line="build.py ${build} test" />
    </exec>
</target>

<target name='voltdbipc' depends="ee"
    description="Build the IPC client.">
    <exec dir='.' executable='python' failonerror='true'>
        <arg line="build.py ${build} voltdbipc" />
    </exec>
</target>

<target name='ee' depends="catalog, jnicompile, buildinfo"
    description="Build C++ JNI library and copy it to production folder.">
    <exec dir='.' executable='python' failonerror='true'>
        <arg line="build.py ${build}" />
    </exec>
    <copy todir='voltdb'>
        <fileset dir="${build.dir}/nativelibs">
            <include name="libvoltdb-${dist.version}.*"/>
        </fileset>
    </copy>
</target>

<target name='recompile_ee_nodepends'
    description="Build C++ JNI library and copy it to production folder.">
    <exec dir='.' executable='python' failonerror='true'>
        <arg line="build.py ${build}" />
    </exec>
    <copy todir='voltdb'>
        <fileset dir="${build.dir}/nativelibs">
            <include name="libvoltdb-${dist.version}.*"/>
        </fileset>
    </copy>
</target>

<target name='ee_profile' depends="catalog, jnicompile"
    description="Build C++ JNI lib dl-ing perf tools and copy it to production folder.">
    <exec dir='.' executable='python' failonerror='true'>
        <arg line="build.py ${build} profile" />
    </exec>
</target>

<target name='execplanfrag' depends="ee"
        description="Create test program that loads catalog and tables and executes a plan fragment.">
    <exec dir='.' executable='python' failonerror='true'>
        <arg line="build.py EXECPLANFRAG ${build}" />
    </exec>
</target>


<!--
***************************************
LICENSING
***************************************
-->

<target name='licensecheck' description="make sure all source files have approved licenses">
    <exec dir='tools' executable='python' failonerror='true'>
        <arg line="licensescheck.py" />
        <arg line="${voltpro}"/>
    </exec>
</target>


<!--
***************************************
TEST CASES
***************************************
-->

<target name="pythonfser" description="run python voltdbclient tests">
    <property name="build.dir.suffix" value="" /> <!-- Default -->
    <property name='classpath' refid='project.classpath' />
    <property name='echoserver.command' value="java
    -Djava.library.path=${build.dir}${build.dir.suffix}/nativelibs -classpath
    ${classpath} -server -Xmx256m -ea
    org.voltdb.messaging.EchoServer" />
    <exec dir='tests/scripts/' executable='python' failonerror='true'>
        <arg line="Testvoltdbclient.py"/>
        <arg line='"${echoserver.command}"'/>
    </exec>
</target>

<!-- script that runs junit_onesuite for each class in a fileset -->
<!-- if there's a better way to do this than embedding javascript, please help... -->
<scriptdef name="junit-files" language="javascript">
<element name="fileset" type="fileset"/>
<![CDATA[
  filesets = elements.get("fileset");
  for (i = 0; i < filesets.size(); ++i) {
    fileset = filesets.get(i);
    scanner = fileset.getDirectoryScanner(project);
    scanner.scan();
    files = scanner.getIncludedFiles();
    for( j=0; j < files.length; j++) {
        jfile = self.project.createTask("antcall");
        project.setProperty("testfilename", files[j]);
        jfile.setTarget("junit_onesuite");
        jfile.execute();
    }
  }
]]>
</scriptdef>

<!-- run junit for one suite -->
<target name='junit_onesuite'>
    <!-- set defaults for junit vars if not already set -->
    <condition property="junit.timeout" value="${junit.timeout}" else='1800000'>
        <isset property="junit.timeout"/>
    </condition>
    <condition property="junit.printsummary" value="${junit.printsummary}" else='yes'>
        <isset property="junit.printsummary"/>
    </condition>
    <condition property="junit.showoutput" value="${junit.showoutput}" else="false">
        <isset property="junit.showoutput"/>
    </condition>
    <!-- select which set of regression suite configuration types to run -->
    <condition property="regressions" value="${regressions}" else="all">
        <isset property="regressions"/>
    </condition>

    <sequential>

        <!-- convert the filename to a classname -->
        <!-- assumes the file coming in has 1-1 folders to packages -->
        <loadresource property="testname">
            <string value="${testfilename}" />
            <filterchain>
                <replaceregex pattern="/" replace="\." flags="g" />
                <replaceregex pattern="\.class" replace="" />
            </filterchain>
        </loadresource>

        <!-- run ant's junit runner -->
        <junit
            fork="yes"
            haltonfailure="${junit.haltonfailure}"
            failureproperty="junit.failures"
            printsummary="false"
            timeout="${junit.timeout}"
            maxmemory='1024M'
            showoutput="${junit.showoutput}"
        >
            <classpath refid='project.classpath' />
            <jvmarg value="-Djava.library.path=${build.dir}/nativelibs:${base.dir}/third_party/cpp/jnilib" />
            <jvmarg value="-server" />
            <jvmarg value="-Xcheck:jni" />
            <jvmarg value="-Xmx256m"/>
            <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError"/>
            <env key="VOLTDB_BUILD_DIR" value="${build.dir}"/>
            <env key="TEST_DIR" value="${build.testobjects.dir}" />
            <env key="VOLT_REGRESSIONS" value="${regressions}" />
            <env key="VOLT_ENABLEIV2" value="${enableiv2}" />
            <!-- Following two env vars are used by Java code
                 when running ant check -Dbuild=memcheck
                 The voltdbipc client is used in concert with valgrind
                 for most tests (those that would normally run against
                 the single process JNI backend. -->
            <env key="BUILD" value="${build}" />
            <env key="VOLTDBIPC_PATH" value="${build.prod.dir}/voltdbipc" />
            <!-- code coverage output settings, harmless if not in use -->
            <jvmarg value="-Demma.coverage.out.file=${emma.dir}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />
            <!-- junit log4j settings, generates log output of last suite -->
            <jvmarg value="-Dlog4j.configuration=file:${base.dir}/tests/log4j-allconsole.xml" />

            <!-- write per-testcase output to console if verbose mode -->
            <formatter type="plain" usefile="false" if="verbosereport"/>
            <!-- write per-testcase output to testoutput folder -->
            <formatter type="plain" usefile="true" />
            <!-- write all kinds of fun voltdb output to testoutput folder -->
            <formatter
                type='xml'
                classname="org.voltdb.VoltJUnitFormatter"
                usefile='false'
                extension="none"
            />
            <!-- write xml output for the report  -->
            <formatter type="xml" />

            <!-- specify the tests here (there should be only one) -->
            <batchtest todir="${build.testoutput.dir}">
                <fileset dir='${build.test.dir}'>
                    <include name='${testfilename}'/>
                </fileset>
            </batchtest>

            <assertions><enable/></assertions>
        </junit>

        <!-- per-test post processing script
             1. ensure a result xml file got written
             2. ensure no whacky processes were stranded -->
        <exec executable="/usr/bin/env">
            <arg value="python" />
            <arg value="${base.dir}/tools/junit-post-process.py" />
            <arg value="--testname=${testname}" />
            <arg value="--outputpath=${build.testoutput.dir}" />
            <arg value="--testresult=${junit.failures}" />
        </exec>
    </sequential>
</target>

<target
    name="junit"
    description="Execute JUnit test suites.">
    <run_junit>
        <tests>
            <fileset dir='${build.test.dir}'>
                <!-- Standard junit fileset -->
                <include name='org/hsqldb_voltpatches/**/Test*.class'/>
                <include name='org/voltcore/**/Test*.class' />
                <include name='org/voltdb/**/Test*.class'/>
                <include name='org/voltdb/network/**/Test*.class'/>
                <include name='org/voltdb/messaging/**/*Test.class'/>
                <include name='org/voltdb/network/**/*Test.class'/>
                <include name='org/voltdb/utils/**/*Test.class'/>
                <exclude name="**/*$*.class"/>
                <exclude name="**/TestMaliciousClientSuite.class" />
                <exclude name="org/voltdb/quarantine/**/*.class"/>
                <exclude name="**/TestExportBase.class"/>
                <!-- Excluded pro tests -->
                <exclude name="**/TestCommandLogServer.class" />
                <exclude name="**/TestCommandLogReinitiator.class"/>
                <exclude name="**/TestCommandLog.class"/>
                <exclude name="**/TestLogReader.class"/>
                <exclude name="**/TestTaskLog.class"/>
                <exclude name="**/TestResponseSampler.class" />
                <exclude name="**/TestRestoreWithReplay.class" />
                <exclude name="**/TestPauselessRejoinFuzz.class" />
                <exclude name="**/TestSecondaryRejoin.class" />
                <exclude name="**/TestSnapshotSaveTruncation.class" />
                <!-- Exclude community tests -->
                <exclude name="**/TestIV2BlacklistSaveRestoreSysprocSuite.class" />
                <exclude name="**/TestRejoinFuzz.class" />
                <exclude name="**/TestRejoinFuzz2.class" />
                <exclude name="**/TestNonDetermisticSeppuku.class" />
                <exclude name="**/TestExecutionSite.class" />
                <exclude name="**/TestMaliciousClientSuite.class" />
                <exclude name="**/TestSneakyExecutionOrderSuite.class" />
            </fileset>
        </tests>
    </run_junit>
</target>

<!-- common macro to run a bynch of junit -->
<macrodef name='run_junit'>
    <element name='tests'/>
    <sequential>
        <mkdir dir='${build.testoutput.dir}' />
        <mkdir dir='${build.dir}/testoutput-archive/' />
        <exec executable="/usr/bin/env" failonerror='true'>
            <arg value="python" />
            <arg value="${base.dir}/tools/junit-pre-process.py" />
            <arg value="--archivepath=${build.dir}/testoutput-archive/" />
            <arg value="--outputpath=${build.testoutput.dir}" />
        </exec>
        <junit-files>
            <tests/>
        </junit-files>

        <echo message='' /><echo message='' />
        <junitreport todir="${build.testoutput.dir}">
            <fileset dir="${build.testoutput.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="noframes" todir="${build.testoutput.dir}/report"/>
            <report
                styledir="tools"
                format="noframes"
                todir="${build.testoutput.dir}"
            />
        </junitreport>

        <exec dir="${build.testoutput.dir}" executable='cat'>
            <arg line="junit-noframes.html"/>
        </exec>

        <!-- Fail the build if there were any problems.
             This runs all the tests before failing. -->
        <available file="${build.testoutput.dir}/JUNITHADFAILURES" property="junit.failures"/>
        <fail if="junit.failures" unless="emma.enabled" message="JUnit had failures" />
    </sequential>
</macrodef>

<target name="junit_legacy" description="Run JUnit in pre-iv2 mode.">
    <condition property="enableiv2" value="${enableiv2}" else="false">
        <isset property="enableiv2"/>
    </condition>
    <run_junit>
        <tests>
            <fileset dir='${build.test.dir}'>
                <include name='org/hsqldb_voltpatches/**/Test*.class'/>
                <include name='org/voltcore/**/Test*.class' />
                <include name='org/voltdb/**/Test*.class'/>
                <include name='org/voltdb/network/**/Test*.class'/>
                <include name='org/voltdb/messaging/**/*Test.class'/>
                <include name='org/voltdb/network/**/*Test.class'/>
                <include name='org/voltdb/utils/**/*Test.class'/>
                <exclude name="**/*$*.class"/>
                <exclude name="**/TestMaliciousClientSuite.class" />
                <exclude name="org/voltdb/quarantine/**/*.class"/>
                <exclude name="**/TestExportBase.class"/>
            </fileset>
        </tests>
    </run_junit>
</target>

<target name="junit_quarantine" description="Run testcases which fail unpredictably.">
    <run_junit>
        <tests>
            <fileset dir='${build.test.dir}'>
                <include name='org/voltdb/quarantine/**/Test*.class'/>
                <exclude name="**/*$*.class"/>
            </fileset>
        </tests>
    </run_junit>
</target>

<target name='emma_junit'
        description="run junit target and generate coverage report"
        depends="with.emma, junit, emma-report"
/>

<target name='emma_junit_legacy'
        description="run junit_legacy target and generate coverage report"
        depends="with.emma, junit_legacy, emma-report"
/>

<target name='with.emma' description="enable code coverage analysis" >
    <!-- set up emma -->
    <path id="emma.lib" >
        <pathelement location="${vendor.lib.dir}/emma.jar" />
        <pathelement location="${vendor.lib.dir}/emma_ant.jar" />
    </path>
    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
    <!-- enable emma -->
    <property name="emma.enabled" value="true" />
    <!-- instrument the code -->
    <property name="emma.dir" location="${build.dir}/emma" />
    <mkdir dir="${emma.dir}" />
    <emma>
        <instr destdir="${build.instr.dir}/org/"
               metadatafile="${emma.dir}/metadata.emma"
               merge="true">
          <instrpath path="${build.prod.dir}/org"/>

          <filter includes="*voltdb.*"/>
          <filter includes="*voltcore.*"/>
          <!--pmsg is the protobuf-generated code for dragent-->
          <filter excludes="*pmsg.*"/>
          <filter excludes="*exampleutils.*"/>
        </instr>
    </emma>
</target>

<target
    name='emma-report'
    description="Generate code coverage reports.  You need call the with.emma target before your test target">
    <emma>
        <report
            sourcepath="${src.gpl.dir}"
            sort="+name"
            metrics="method:70,block:80,line:80,class:100">
            <fileset dir="${emma.dir}"><include name="*.emma"/></fileset>
            <xml outfile="${emma.dir}/coverage.xml" depth="method" />
            <html
                outfile="${emma.dir}/coverage.html"
                depth="method"
                columns="name,class,method,block,line"
                encoding="UTF-8"
            />
        </report>
    </emma>
</target>


<!--
    this target is intended to be called only with antcall!
    set two properties beforehand or as part of the call:
    lcov.dir is the directory in which to put the coverage report
    lcov.target is the ant target to run under coverage
-->
<target name='with.lcov' depends="jnicompile"
        description="Generate C++ code coverage reports.">
  <property name="lcov.base.tracefile" value="lcov_base.info" />
  <property name="lcov.test.tracefile" value="lcov_test.info" />
  <property name="lcov.tracefile" value="lcov.info" />
  <!-- Generate instrumented objects -->
  <!-- Whether any work needs doing is left to the C++ makefile -->
  <exec dir='.' executable='python' failonerror='true'>
    <arg line="build.py ${build} coverage" />
  </exec>
  <mkdir dir="${lcov.dir}" />
  <!-- Reset all counters -->
  <exec dir="${lcov.dir}" executable='lcov' failonerror="true">
    <arg line="--directory ${build.dir}-coverage/objects"/>
    <arg line="--zerocounters"/>
  </exec>
  <!-- Get baseline coverage (zero coverage) -->
  <exec dir="${lcov.dir}" executable='lcov' failonerror="true">
    <arg line="--directory ${build.dir}-coverage/objects"/>
    <arg line="-i --capture"/>
    <arg line="--output-file ${lcov.base.tracefile}"/>
    <arg line="-b ${src.ee.parent.dir}"/>
  </exec>
  <!-- Run the tests -->
  <antcall target="lcov-unit-tests">
    <param name="build.dir.suffix" value="-coverage" />
  </antcall>
  <antcall target="sqlcoverage">
    <param name="build.dir.suffix" value="-coverage" />
    <param name="sqlcoverage.failonerror" value="false" />
  </antcall>
  <!-- Get test coverage -->
  <echo>Processing coverage</echo>
  <exec dir="${lcov.dir}" executable='lcov' failonerror="true">
    <arg line="--directory ${build.dir}-coverage/objects"/>
    <arg line="--capture"/>
    <arg line="--output-file ${lcov.test.tracefile}"/>
    <arg line="-b ${src.ee.parent.dir}"/>
  </exec>
  <!-- Combine the baseline coverage and the test coverage -->
  <exec dir="${lcov.dir}" executable='lcov' failonerror="true">
    <arg line="-a ${lcov.base.tracefile}"/>
    <arg line="-a ${lcov.test.tracefile}"/>
    <arg line="-o ${lcov.tracefile}"/>
  </exec>
  <!-- Remove standard library and third party coverages -->
  <exec dir="${lcov.dir}" executable='lcov' failonerror="true">
    <arg line="-r ${lcov.tracefile}"/>
    <arg line='"/usr/include/*"'/>
    <arg line='"*third_party*"'/>
    <arg line="-o ${lcov.tracefile}"/>
  </exec>
  <!-- Generate HTML report -->
  <exec dir="${lcov.dir}" executable='genhtml' failonerror="true">
    <arg line="${lcov.tracefile}"/>
  </exec>
</target>

<target name='lcov-report' description=''>
    <property name="lcov.dir" location="${build.dir}-coverage/lcov" />
    <!-- <property name="lcov.target" value="sqlcoverage" /> -->
    <antcall target="with.lcov" />
</target>

<target
    name='lcov-unit-tests'
    description="Run C++ unit tests from the coverage directory">
    <exec dir='.' executable='python' failonerror='true'>
        <env key="TEST_DIR" value="${build.dir}-coverage/testobjects" />
        <arg line="build.py ${build} test coverage" />
    </exec>
</target>

<!-- <target -->
<!--     name='lcov-unit-tests-report' -->
<!--     description="Generate C++ unit test coverage reports."> -->
<!--     <property -->
<!--         name="lcov.dir" -->
<!--         location="${build.dir}-coverage/lcov-unit-tests" -->
<!--     /> -->
<!--     <property name="lcov.target" value="lcov-unit-tests" /> -->
<!--     <antcall target="with.lcov" /> -->
<!-- </target> -->

<target
    name='testability-report'
    depends="voltdbthin.jar"
    description="produce Google Code testability-explorer report">
    <path id="testability.lib">
        <pathelement
            location="${vendor.lib.dir}/ant-testability-explorer.jar"
        />
        <pathelement
            location="${vendor.lib.dir}/testability-explorer.jar"
        />
    </path>
    <taskdef
        name="testability"
        classname="com.google.ant.TestabilityTask"
        classpathref="testability.lib"
    />
    <testability
        resultfile="${build.dir}/testability.result.html" print="html"
        errorfile="${build.dir}/testability.err.txt">
        <classpath>
            <fileset dir="${build.prod.dir}">
                <include name="voltdbthin.jar" />
            </fileset>
        </classpath>
    </testability>
</target>

<target name="cpd">
    <taskdef
        name="cpdtask"
        classname="net.sourceforge.pmd.cpd.CPDTask"
        classpath="${vendor.lib.dir}/pmd-4.2.5.jar"
    />
    <macrodef name="cpd">
        <attribute name="language"/>
        <attribute name="srcdir"/>
        <attribute name="format"/>
        <sequential>
            <echo>@{language} @{srcdir} @{format}</echo>
            <cpdtask
                minimumTokenCount="100"
                outputFile="${build.dir}/cpd-@{language}.@{format}"
                language="@{language}"
                format="@{format}">
                <fileset dir="@{srcdir}">
                    <include name="**/*.@{language}"/>
                    <exclude name="**/pmsg/*.@{language}"/>
                </fileset>
            </cpdtask>
        </sequential>
    </macrodef>
    <cpd language="java" srcdir="${src.gpl.dir}" format="text"/>
    <cpd language="java" srcdir="${src.gpl.dir}" format="xml"/>
    <cpd language="cpp" srcdir="${src.ee.dir}" format="text"/>
    <cpd language="cpp" srcdir="${src.ee.dir}" format="xml"/>
</target>

<!-- This target will run a junit suite. It will also run a single
     suite under valgrind with -Dbuild=memcheck.  NOTE: to use valgrind,
     you must "cd obj/memcheck && make prod/voltdbipc" separately. -->
<target name="junitclass"
    description="Run one junit suite (i.e, -Djunitclass=TestSQLFeaturesSuite)">

    <condition property="timeoutLength" value="${timeoutLength}" else='900000'>
        <isset property="timeoutLength"/>
    </condition>
    <condition property="junit.showoutput" value="${junit.showoutput}" else="true">
        <isset property="junit.showoutput"/>
    </condition>
    <!-- output per-testcase stats at the end of each suite -->
    <condition property="verbosereport" value="${verbosereport}" else="true">
        <isset property="verbosereport"/>
    </condition>
    <!-- run iv2 by default. -Denableiv2=false to get legacy -->
    <condition property="enableiv2" value="${enableiv2}" else="true">
        <isset property="enableiv2"/>
    </condition>

    <run_junit>
        <tests>
            <fileset dir='${build.test.dir}'>
              <include name="**/${junitclass}.class"/>
            </fileset>
        </tests>
    </run_junit>
    <fail if="junit.failures" message="JUnit had failures" />
</target>

<macrodef name="samplecheck">
    <attribute name="app"/>
    <!-- make sure example application compiles -->
    <sequential>
        <exec dir="${dist.examples.dir}/@{app}" executable="/usr/bin/env" failonerror='true'>
            <arg value="bash" />
            <arg value="run.sh" />
            <arg value="srccompile" />
        </exec>
    </sequential>
</macrodef>

<target name="distcheck" depends='dist'
    description="Verify distribution sample applications compile and run.">

    <echo>checking voltcache</echo>
    <samplecheck app="voltcache" />
    <echo>checking voltkv</echo>
    <samplecheck app="voltkv" />
    <echo>checking voter</echo>
    <samplecheck app="voter" />
</target>

<target name='sqlcoverage' depends="ee,compile"
    description="Run the SQL coverage tests.">
    <property name="build.dir.suffix" value="" /> <!-- Default -->
    <property name="sqlcoverage.failonerror" value="true" />
    <property name="test.example.dir"
    location="tests/scripts/examples/sql_coverage" />
    <property name="log4j.configuration" location="tests/log4j-allconsole.xml" />
    <property name="default_config" location="${test.example.dir}/config.py" />
    <property name="regression_config"
              location="${test.example.dir}/regression-config.py" />
    <property name="sqlcov.dir" location="${build.dir}/sqlcoverage" />
    <exec dir='.' executable='/bin/sh'>
        <arg line="-c 'rm -rf ${sqlcov.dir}'"/>
    </exec>
    <mkdir dir="${sqlcov.dir}" />
    <condition property="enableiv2" value="${enableiv2}" else="false">
        <isset property="enableiv2"/>
    </condition>
    <condition property="" value="${env.VOLTBUILD}" else='release'>
        <isset property="env.VOLTBUILD"/>
    </condition>
    <condition property="seed_arg" value="-s ${sql_coverage_seed}" else="">
        <isset property="sql_coverage_seed"/>
    </condition>
    <condition property="meta_config" value="${default_config}"
               else="${regression_config}">
        <isset property="sql_coverage_default"/>
    </condition>
    <condition property="config_arg" value="-c ${sql_coverage_config}" else="">
        <isset property="sql_coverage_config"/>
    </condition>
    <condition property="config_verbose" value="-r" else="">
        <isset property="sql_coverage_verbose"/>
    </condition>
    <condition property="debug_output" value="" else="quietadhoc">
        <isset property="sql_coverage_verbose"/>
    </condition>
    <condition property="hosts" value="${sql_coverage_hosts}" else="1">
        <isset property="sql_coverage_hosts"/>
    </condition>
    <condition property="sitesperhost" value="${sql_coverage_sites}" else="3">
        <isset property="sql_coverage_sites"/>
    </condition>
    <condition property="replicas" value="${sql_coverage_replicas}" else="0">
        <isset property="sql_coverage_replicas"/>
    </condition>
    <condition property="hostname" value="-l ${sql_coverage_hostname}" else="">
        <isset property="sql_coverage_hostname"/>
    </condition>
    <condition property="hostport" value="-p ${sql_coverage_hostport}" else="">
        <isset property="sql_coverage_hostport"/>
    </condition>
    <condition property="hostcount" value="-n ${sql_coverage_hosts}" else="-n 1">
        <isset property="sql_coverage_hosts"/>
    </condition>
    <condition property="kfactor" value="-k ${sql_coverage_replicas}" else="-k 0">
        <isset property="sql_coverage_replicas"/>
    </condition>
    <condition property="sitescount" value="-t ${sql_coverage_sites}" else="-t 3">
        <isset property="sql_coverage_sites"/>
    </condition>
    <condition property="flushddl" value="-f ${sql_coverage_flushddl}" else="-f flush-DDL.sql">
        <isset property="sql_coverage_flushddl"/>
    </condition>
    <property name='classpath' refid='project.classpath' />
    <property name='simpleserver.command' value='java
    -Djava.library.path=${build.dir}${build.dir.suffix}/nativelibs -classpath
    ${classpath} -Dlog4j.configuration=file://${log4j.configuration} -server -Xmx512m -XX:+AggressiveOpts -ea
    org.voltdb.sqlgenerator.SimpleServer hosts=${hosts}
    sitesperhost=${sitesperhost} replicas=${replicas}
    ${debug_output}' />
    <copy todir="${build.test.dir}/org/voltdb/sqlgenerator">
      <fileset dir="${test.example.dir}">
        <include name="**/*.sql"/>
      </fileset>
    </copy>
    <copy todir="tests/scripts">
      <fileset dir=".">
        <include name="buildstring.txt"/>
        <include name="version.txt"/>
      </fileset>
    </copy>
    <exec dir='tests/scripts' executable='python2.6' failonerror="${sqlcoverage.failonerror}">
        <env key="TEST_DIR" value="${build.testobjects.dir}" />
        <env key="VOLTDB_BUILD_DIR" value="${build.dir}"/>
        <env key="VOLT_ENABLEIV2" value="${enableiv2}" />
        <arg line='sql_coverage_test.py' />
        <arg line="${seed_arg}" />
        <arg line="${config_arg}" />
        <arg line="${config_verbose}" />
        <arg file="${meta_config}" />
        <arg file="${sqlcov.dir}" />
        <arg line='"${simpleserver.command}"' />
        <arg line="${hostname}" />
        <arg line="${hostport}" />
        <arg line="${hostcount}" />
        <arg line="${kfactor}" />
        <arg line="${sitescount}" />
        <arg line="${flushddl}" />
    </exec>
</target>


<property name="findbugs.home" value="${vendor.lib.dir}/findbugs-2.0.0" />

<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" >
  <classpath>
    <fileset dir="${findbugs.home}/lib" includes="**/*.jar"/>
  </classpath>
</taskdef>

<target name="findbugs" depends="voltdb.jar">
  <property name="findbugs.dir" location="${build.dir}/findbugs" />
  <mkdir dir="${findbugs.dir}" />
  <findbugs home="${findbugs.home}"
            excludeFilter="tools/findbugs-exclude.xml"
            output="xml"
            outputFile="${build.dir}/findbugs/findbugs.xml">
    <class location="voltdb/voltdb-${dist.version}.jar" />
    <auxClasspath>
      <fileset dir="${lib.dir}" includes ="*.jar" />
      <fileset dir="${vendor.lib.dir}" includes="*.jar" />
      <pathelement location="${build.test.dir}" />
      <fileset refid="voltpro.classpath"/>
    </auxClasspath>
    <sourcePath path="${src.gpl.dir}" />
    <sourcePath path="${voltpro.src.dir}"/>
  </findbugs>
</target>


<target name="plannertester" description="Run plannertester">
    <property name="plannertester.dir" value="tests/scripts/plannertester"/>
    <fileset id="plannertester.configs" dir="${plannertester.dir}/config" includes="**"/>
    <echo message="Running from ${plannertester.dir}"/>

    <java classname="org.voltdb.planner.plannerTester"
          classpathref="project.classpath"
          dir="${plannertester.dir}"
          failonerror="true"
          fork="true">
        <arg line="-C=config/voter,config/voltkv,config/voltcache -d -s -e -cs -r=reports -sp=plan-voter,plan-voltkv,plan-voltcache"/>
    </java>
</target>

<!--
***************************************
BENCHMARKS
***************************************
-->

<target name='proccallmicrobench' depends='ee, compile'
    description="Run client-server stored procedure call overhead microbenchmark. [-Dclients={# clients}]">
    <java fork="true" failonerror="true"
        classname="org.voltdb.ProcedureCallMicrobench" >
        <arg value='${clients}' />
        <jvmarg value="-Djava.library.path=${build.dir}/nativelibs" />
        <jvmarg value="-server" />
        <jvmarg value="-Xmx512m" />
        <classpath refid='project.classpath' />
        <assertions><disable /></assertions>
    </java>
</target>

<target name='update_logging' depends='compile'
    description="Invoke utility that connects to the specified VoltDB host and calls @UpdateLogging system procedure with the specified XML confiG file">
    <java fork="true" failonerror="true"
        classname="org.voltdb.UpdateLogging" >
        <arg value='host=${host}' />
        <arg value='config=${config}' />
        <arg value='allHosts=${allHosts}' />
        <arg value='user=${user}' />
        <arg value='password=${password}' />
        <classpath refid='project.classpath' />
        <assertions><enable /></assertions>
    </java>
</target>

<target name='tcp_throughput_sender' depends='compile'
    description="Open a TCP connection and send fixed sized packets for a specified duration.">
    <java fork="true" failonerror="true"
        classname="org.voltdb.TCPThroughputSender" >
        <jvmarg value="-server" />
        <jvmarg value="-Xmx512m" />
        <arg value='${address}' />
        <arg value='${packetsize}' />
        <arg value='${seconds}' />
        <arg value='${numsockets}' />
        <classpath refid='project.classpath' />
        <assertions><enable /></assertions>
    </java>
</target>

<target name='tcp_throughput_receiver' depends='compile'
  description="Accept a TCP connection and log how many messages and bytes are received.">
    <java fork="true" failonerror="true"
        classname="org.voltdb.TCPThroughputReceiver" >
        <jvmarg value="-server" />
        <jvmarg value="-Xmx512m" />
        <arg value="${respond}" />
        <arg value="${responsesize}" />
        <arg value="${packetsize}" />
        <classpath refid='project.classpath' />
        <assertions><enable /></assertions>
    </java>
</target>

<!--
***************************************
JAPEX MICROBENCHMARKS
***************************************
-->

<target name='microbenchmarks' description="Run all micro-benchmarks.">
    <!-- don't fail on error: jpeg generator requires sun jdk -->
    <java fork="true" classname="com.sun.japex.Japex">
        <jvmarg value="-server"/>
        <classpath refid="project.classpath"/>
        <jvmarg value="-Djapex.numberOfThreads=1"/>
        <arg line="microbenchmark-config.xml"/>
    </java>
</target>

<!--
***************************************
HUDSON-SPECIFIC TARGETS
***************************************
-->

<target name='copy-coverage-files'
    description="Collect test results so that Hudson can display them even after an ant clean">
    <copy todir=".." preservelastmodified="true">
        <fileset dir="obj/release/emma" includes="coverage.html"/>
        <fileset dir="obj/release/emma" includes="_files/"/>
        <fileset dir="obj/release-coverage" includes="lcov-unit-tests"/>
        <fileset dir="${build.dir}" includes="testability.result.html"/>
    </copy>
</target>

<!--
***************************************
UTILITIES
***************************************
-->

<target name='dumper' description="Ask a running voltdb to dump state.">
    <java fork="true" classname="org.voltdb.utils.DumpManager">
        <jvmarg value="-server"/>
        <classpath refid="project.classpath"/>
        <arg value='${hostname}' />
    </java>
</target>

<target name='dumpcluster' description="Ask a running voltdb on the default cluster to dump state.">
    <java fork="true" classname="org.voltdb.utils.DumpManager">
        <jvmarg value="-server"/>
        <classpath refid="project.classpath"/>
        <arg value='volt3a' />
        <arg value='volt3b' />
        <arg value='volt3c' />
        <arg value='volt3d' />
        <arg value='volt3e' />
        <arg value='volt3f' />
    </java>
</target>

<target name='exportsinkserver'
    description="Run the Export sink test server.">
    <java fork="true" failonerror="true"
        classname="org.voltdb.export.ExportSinkServer">
        <classpath refid='project.classpath' />
        <assertions><enable/></assertions>
    </java>
</target>

<!--
***************************************
PROJECT FILE SCHEMA CODE GENERATION
***************************************
-->

<target name="project_gen"
        depends="project_gen_check"
        unless="project.parsergen.uptodate"
        description="Use JAXB to generate source from the project file schema">
    <delete file="${project.parsergen.dir}/.flagfile" />
    <exec dir="${src.gpl.dir}" executable="xjc" failonerror="true">
        <arg line="-p ${project.parsergen.pkg} ${project.parsergen.xsd}" />
    </exec>
    <touch file="${project.parsergen.dir}/.flagfile" />
</target>

<target name="project_gen_check" depends="">
    <uptodate property="project.parsergen.uptodate"
              targetfile="${project.parsergen.dir}/.flagfile">
        <srcfiles file="${src.gpl.dir}/${project.parsergen.xsd}" />
    </uptodate>
</target>

<target name="clean_project_gen"
        description="Remove all source files generated by JAXB for project file schema.">
    <exec dir='.' executable='/bin/sh' failonerror='false'>
        <arg line="-c 'rm -rfv ${project.parsergen.dir}'" />
    </exec>
</target>

<!--
***************************************
DEPLOYMENT FILE SCHEMA CODE GENERATION
***************************************
-->

<target name="deployment_gen"
        depends="deployment_gen_check"
        unless="deployment.parsergen.uptodate"
        description="Use JAXB to generate source from the deployment file schema">
    <delete file="${deployment.parsergen.dir}/.flagfile" />
    <exec dir="${src.gpl.dir}" executable="xjc" failonerror="true">
        <arg line="-p ${deployment.parsergen.pkg} ${deployment.parsergen.xsd}" />
    </exec>
    <touch file="${deployment.parsergen.dir}/.flagfile" />
</target>

<target name="deployment_gen_check" depends="">
    <uptodate property="deployment.parsergen.uptodate"
              targetfile="${deployment.parsergen.dir}/.flagfile">
        <srcfiles file="${src.gpl.dir}/${deployment.parsergen.xsd}" />
    </uptodate>
</target>

<target name="clean_deployment_gen"
        description="Remove all source files generated by JAXB for deployment file schema.">
    <exec dir='.' executable='/bin/sh' failonerror='false'>
        <arg line="-c 'rm -rfv ${deployment.parsergen.dir}'" />
    </exec>
</target>

<!--
***********************
DEBIAN PACKAGE CREATION
***********************
-->

<target name="debian_package"
	    depends="buildinfo"
        description="Create Debian/Ubuntu package. Uses sudo, so it may prompt for a password.">
    <exec executable="sudo" failonerror="true">
        <arg value="python" />
        <arg value="${base.dir}/tools/voltdb-install.py" />
        <arg value="-D" />
        <arg value="${raw.dist.dir}/voltdb-${dist.version}.tar.gz" />
    </exec>
</target>

<!-- This debian package cleaning target is safe. It doesn't run as root. -->
<target name="clean_debian_package"
	    depends=""
        description="Remove all Debian/Ubuntu package build artifacts.">
    <exec dir='.' executable='/bin/sh' failonerror='false'>
        <arg line="-c 'rm -rfv ${debian.package.dir}'" />
    </exec>
</target>

<!-- Use this if permissions are messed up by interrupted package building as root. -->
<target name="force_clean_debian_package"
	    depends=""
        description="Forceably remove all Debian/Ubuntu package build artifacts as root.">
    <exec dir="." executable="sudo" failonerror="false">
        <arg line="/bin/sh -c 'rm -rfv ${debian.package.dir}'" />
    </exec>
</target>

<!-- END PROJECT -->
</project>
