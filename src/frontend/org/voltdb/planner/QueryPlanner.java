/* This file is part of VoltDB.
 * Copyright (C) 2008-2012 VoltDB Inc.
 *
 * VoltDB is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * VoltDB is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with VoltDB.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.voltdb.planner;

import java.io.File;
import java.util.List;

import org.hsqldb_voltpatches.HSQLInterface;
import org.hsqldb_voltpatches.HSQLInterface.HSQLParseException;
import org.hsqldb_voltpatches.VoltXMLElement;
import org.json_voltpatches.JSONException;
import org.json_voltpatches.JSONObject;
import org.voltdb.ParameterSet;
import org.voltdb.VoltType;
import org.voltdb.catalog.Cluster;
import org.voltdb.catalog.Database;
import org.voltdb.compiler.DatabaseEstimates;
import org.voltdb.compiler.ScalarValueHints;
import org.voltdb.expressions.AbstractExpression;
import org.voltdb.expressions.ParameterValueExpression;
import org.voltdb.planner.microoptimizations.MicroOptimizationRunner;
import org.voltdb.plannodes.AbstractPlanNode;
import org.voltdb.plannodes.PlanNodeList;
import org.voltdb.utils.BuildDirectoryUtils;

/**
 * The query planner accepts catalog data, SQL statements from the catalog, then
 * outputs the plan with the lowest cost according to the cost model.
 *
 */
public class QueryPlanner {
    String m_sql;
    String m_stmtName;
    String m_procName;
    PlanAssembler m_assembler;
    HSQLInterface m_HSQL;
    DatabaseEstimates m_estimates;
    Cluster m_cluster;
    Database m_db;
    String m_recentErrorMsg;
    boolean m_quietPlanner;
    final boolean m_fullDebug;
    PartitioningForStatement m_partitioning;
    int m_maxTablesPerJoin;
    AbstractCostModel m_costModel;
    ScalarValueHints[] m_paramHints;
    String m_joinOrder;

    // generated by parse(..)
    VoltXMLElement m_xmlSQL = null;
    ParameterizationInfo m_paramzInfo = null;

    // generated by plan(..)
    boolean m_wasParameterizedPlan = false;

    /**
     * Initialize planner with physical schema info and a reference to HSQLDB parser.
     *
     * @param sql Literal SQL statement to parse
     * @param stmtName The name of the statement for logging/debugging
     * @param procName The name of the proc for logging/debugging
     * @param catalogCluster Catalog info about the physical layout of the cluster.
     * @param catalogDb Catalog info about schema, metadata and procedures.
     * @param partitioning Describes the specified and inferred partition context.
     * @param HSQL HSQLInterface pointer used for parsing SQL into XML.
     * @param estimates
     * @param suppressDebugOutput
     * @param maxTablesPerJoin
     * @param costModel The current cost model to evaluate plans with.
     * @param paramHints
     * @param joinOrder
     */
    public QueryPlanner(String sql,
                        String stmtName,
                        String procName,
                        Cluster catalogCluster,
                        Database catalogDb,
                        PartitioningForStatement partitioning,
                        HSQLInterface HSQL,
                        DatabaseEstimates estimates,
                        boolean suppressDebugOutput,
                        int maxTablesPerJoin,
                        AbstractCostModel costModel,
                        ScalarValueHints[] paramHints,
                        String joinOrder)
    {
        assert(sql != null);
        assert(stmtName != null);
        assert(procName != null);
        assert(HSQL != null);
        assert(catalogCluster != null);
        assert(catalogDb != null);
        assert(costModel != null);
        assert(catalogDb.getCatalog() == catalogCluster.getCatalog());

        m_sql = sql;
        m_stmtName = stmtName;
        m_procName = procName;
        m_HSQL = HSQL;
        m_assembler = new PlanAssembler(catalogCluster, catalogDb, partitioning);
        m_db = catalogDb;
        m_cluster = catalogCluster;
        m_estimates = estimates;
        m_quietPlanner = suppressDebugOutput;
        m_partitioning = partitioning;
        m_maxTablesPerJoin = maxTablesPerJoin;
        m_costModel = costModel;
        m_paramHints = paramHints;
        m_joinOrder = joinOrder;
        m_fullDebug = System.getProperties().containsKey("compilerdebug");
    }

    /**
     * Parse a SQL literal statement into an unplanned, intermediate representation.
     * This is normally followed by a call to
     * {@link this#plan(AbstractCostModel, String, String, String, String, int, ScalarValueHints[]) },
     * but splitting these two affords an opportunity to check a cache for a plan matching
     * the auto-parameterized parsed statement.
     */
    public void parse() throws PlanningErrorException {
        // reset any error message
        m_recentErrorMsg = null;

        // Reset plan node ids to start at 1 for this plan
        AbstractPlanNode.resetPlanNodeIds();

        // use HSQLDB to get XML that describes the semantics of the statement
        // this is much easier to parse than SQL and is checked against the catalog
        try {
            m_xmlSQL = m_HSQL.getXMLCompiledStatement(m_sql);
        } catch (HSQLParseException e) {
            // XXXLOG probably want a real log message here
            throw new PlanningErrorException(e.getMessage());
        }

        if (!m_quietPlanner && m_fullDebug) {
            outputCompiledStatement(m_xmlSQL);
        }
    }

    /**
     * Auto-parameterize all of the literals in the parsed SQL statement.
     *
     * @return An opaque token representing the parsed statement with (possibly) parameterization.
     */
    public String parameterize() {
        m_paramzInfo = ParameterizationInfo.parameterize(m_xmlSQL);

        // skip plans with pre-existing parameters and plans that don't parameterize
        // assume a user knows how to cache/optimize these
        if (m_paramzInfo != null) {
            // if requested output the second version of the parsed plan
            if (!m_quietPlanner && m_fullDebug) {
                outputParameterizedCompiledStatement(m_paramzInfo.parameterizedXmlSQL);
            }

            return m_paramzInfo.parameterizedXmlSQL.toMinString();
        }

        // fallback when parameterization is
        return m_xmlSQL.toMinString();
    }

    public String[] extractedParamLiteralValues() {
        if (m_paramzInfo == null) {
            return null;
        }
        return m_paramzInfo.paramLiteralValues;
    }

    /**
     * Get the best plan for the SQL statement given, assuming the given costModel.
     *
     * @return The best plan found for the SQL statement.
     * @throws PlanningErrorException on failure.
     */
    public CompiledPlan plan() throws PlanningErrorException {
        // reset any error message
        m_recentErrorMsg = null;

        // what's going to happen next:
        //  If a parameterized statement exists, try to make a plan with it
        //  On success return the plan.
        //  On failure, try the plan again without parameterization

        if (m_paramzInfo != null) {
            try {
                // compile the plan with new parameters
                CompiledPlan plan = compileFromXML(m_paramzInfo.parameterizedXmlSQL,
                                                   m_paramzInfo.paramLiteralValues);

                plan.partitioningKeyIndex =
                        buildParameterSetFromExtractedLiteralsAndReturnPartitionIndex(
                                plan.parameters, plan.extractedParamValues);
                // set the partition key value for SP plans
                if (plan.partitioningKeyIndex >= 0) {
                    plan.setPartitioningKey(plan.extractedParamValues.toArray()[plan.partitioningKeyIndex]);
                }

                m_wasParameterizedPlan = true;
                return plan;
            }
            catch (Exception e) {
                // ignore any errors planning with parameters
                // fall through to re-planning without them

                // note, real planning errors ignored here should be rethrown below
            }
        }

        m_recentErrorMsg = null;

        // if parameterization isn't requested or if it failed, plan here
        CompiledPlan plan = compileFromXML(m_xmlSQL, null);
        if (plan == null) {
            throw new PlanningErrorException(m_recentErrorMsg);
        }
        return plan;
    }

    /**
     * After parameterizing a parsed SQL statement, the types of the params are
     * not always accurate. Once we have the full plan, we can create java
     * objects that are the right type for the parameter in question.
     *
     * This method is separate from the core planner path so that if you get a
     * parameterized parsed statement from the planner, and have a full plan for
     * it in the cache, then you can convert the parameters ParameterizationInfo
     * pulled out into the right types for the plan.
     */
    public int buildParameterSetFromExtractedLiteralsAndReturnPartitionIndex(
            VoltType[] paramTypes, ParameterSet psetToBuild) throws Exception
    {
        assert(m_paramzInfo.paramLiteralValues.length == paramTypes.length);
        Object[] params = new Object[m_paramzInfo.paramLiteralValues.length];

        // the extracted params are all strings at first.
        // after the planner infers their types, fix them up
        // the only exception is that nulls are Java NULL, and not the string "null".
        for (int i = 0; i < m_paramzInfo.paramLiteralValues.length; i++) {
            params[i] = ParameterizationInfo.valueForStringWithType(
                    m_paramzInfo.paramLiteralValues[i], paramTypes[i]);
        }

        // handle the case where the statement is partitioned on a newly parameterized value
        int partitionIndex = -1;
        if (m_partitioning.effectivePartitioningValue() == null) {
            AbstractExpression expr = m_partitioning.effectivePartitioningExpression();
            if (expr != null) {
                if (expr instanceof ParameterValueExpression) {
                    ParameterValueExpression pve = (ParameterValueExpression) expr;
                    partitionIndex = pve.getParameterIndex();
                }
            }
        }

        psetToBuild.setParameters(params);

        return partitionIndex;
    }

    /**
     * @return Was this statement planned with auto-parameterization?
     */
    public boolean compiledAsParameterizedPlan() {
        return m_wasParameterizedPlan;
    }

    private CompiledPlan compileFromXML(VoltXMLElement xmlSQL, String[] paramValues) {
        // Get a parsed statement from the xml
        // The callers of compilePlan are ready to catch any exceptions thrown here.
        AbstractParsedStmt parsedStmt = AbstractParsedStmt.parse(m_sql, xmlSQL, paramValues, m_db, m_joinOrder);
        if (parsedStmt == null)
        {
            m_recentErrorMsg = "Failed to parse SQL statement: " + m_sql;
            return null;
        }
        if ((parsedStmt.tableList.size() > m_maxTablesPerJoin) && (parsedStmt.joinOrder == null)) {
            m_recentErrorMsg = "Failed to parse SQL statement: " + m_sql + " because a join of > 5 tables was requested"
                               + " without specifying a join order. See documentation for instructions on manually" +
                                 " specifying a join order";
            return null;
        }

        if (!m_quietPlanner && m_fullDebug) {
            outputParsedStatement(parsedStmt);
        }

        // get ready to find the plan with minimal cost
        CompiledPlan rawplan = null;
        CompiledPlan bestPlan = null;
        String bestFilename = null;
        double minCost = Double.MAX_VALUE;

        // index of the plan currently being "costed"
        int planCounter = 0;

        PlanStatistics stats = null;

        // set up the plan assembler for this statement
        m_assembler.setupForNewPlans(parsedStmt);

        // loop over all possible plans
        while (true) {

            try {
                rawplan = m_assembler.getNextPlan();
            }
            // on exception, set the error message and bail...
            catch (PlanningErrorException e) {
                m_recentErrorMsg = e.getMessage();
                return null;
            }

            // stop this while loop when no more plans are generated
            if (rawplan == null)
                break;

            // run the set of microptimizations, which may return many plans (or not)
            List<CompiledPlan> optimizedPlans = MicroOptimizationRunner.applyAll(rawplan);

            // iterate through the subset of plans
            for (CompiledPlan plan : optimizedPlans) {

                // add in the sql to the plan
                plan.sql = m_sql;

                // this plan is final, resolve all the column index references
                plan.rootPlanGraph.resolveColumnIndexes();

                // compute resource usage using the single stats collector
                stats = new PlanStatistics();
                AbstractPlanNode planGraph = plan.rootPlanGraph;

                // compute statistics about a plan
                boolean result = planGraph.computeEstimatesRecursively(stats, m_cluster, m_db, m_estimates, m_paramHints);
                assert(result);

                // compute the cost based on the resources using the current cost model
                plan.cost = m_costModel.getPlanCost(stats);

                // filename for debug output
                String filename = String.valueOf(planCounter++);

                // find the minimum cost plan
                if (plan.cost < minCost) {
                    minCost = plan.cost;
                    // free the PlanColumns held by the previous best plan
                    bestPlan = plan;
                    bestFilename = filename;
                }

                if (!m_quietPlanner) {
                    if (m_fullDebug) {
                        outputPlanFullDebug(plan, planGraph, filename);
                    }

                    // get the explained plan for the node
                    plan.explainedPlan = planGraph.toExplainPlanString();
                    outputExplainedPlan(plan, filename);
                }
            }
        }

        // make sure we got a winner
        if (bestPlan == null) {
            m_recentErrorMsg = "Unable to plan for statement. Error unknown.";
            return null;
        }

        // reset all the plan node ids for a given plan
        // this makes the ids deterministic
        bestPlan.resetPlanNodeIds();

        if (!m_quietPlanner)
        {
            finalizeOutput(bestFilename, stats);
        }

        // split up the plan everywhere we see send/recieve into multiple plan fragments
        Fragmentizer.fragmentize(bestPlan, m_db);
        return bestPlan;
    }

    /**
     * @param stmtName
     * @param procName
     * @param plan
     * @param filename
     */
    private void outputExplainedPlan(CompiledPlan plan, String filename) {
        BuildDirectoryUtils.writeFile("statement-all-plans/" + m_procName + "_" + m_stmtName,
                                      filename + ".txt",
                                      plan.explainedPlan);
    }

    /**
     * @param stmtName
     * @param procName
     * @param parsedStmt
     */
    private void outputParsedStatement(AbstractParsedStmt parsedStmt) {
        // output a description of the parsed stmt
        BuildDirectoryUtils.writeFile("statement-parsed", m_procName + "_" + m_stmtName + ".txt", parsedStmt.toString());
    }

    /**
     * @param stmtName
     * @param procName
     * @param xmlSQL
     */
    private void outputCompiledStatement(VoltXMLElement xmlSQL) {
        // output the xml from hsql to disk for debugging
        BuildDirectoryUtils.writeFile("statement-hsql-xml", m_procName + "_" + m_stmtName + ".xml", xmlSQL.toString());
    }

    /**
     * @param stmtName
     * @param procName
     * @param xmlSQL
     */
    private void outputParameterizedCompiledStatement(VoltXMLElement xmlSQL) {
        // output the xml from hsql to disk for debugging
        BuildDirectoryUtils.writeFile("statement-hsql-xml", m_procName + "_" + m_stmtName + "-parameterized.xml", xmlSQL.toString());
    }

    /**
     * @param plan
     * @param planGraph
     * @param stmtName
     * @param procName
     * @param filename
     */
    private void outputPlanFullDebug(CompiledPlan plan, AbstractPlanNode planGraph, String filename) {
        // GENERATE JSON DEBUGGING OUTPUT BEFORE WE CLEAN UP THE
        // PlanColumns
        // convert a tree into an execution list
        PlanNodeList nodeList = new PlanNodeList(planGraph);

        // get the json serialized version of the plan
        String json = null;

        try {
            String crunchJson = nodeList.toJSONString();
            //System.out.println(crunchJson);
            //System.out.flush();
            JSONObject jobj = new JSONObject(crunchJson);
            json = jobj.toString(4);
        } catch (JSONException e2) {
            // Any plan that can't be serialized to JSON to
            // write to debugging output is also going to fail
            // to get written to the catalog, to sysprocs, etc.
            // Just bail.
            m_recentErrorMsg = "Plan for sql: '" + plan.sql +
                               "' can't be serialized to JSON";
            // This case used to exit the planner
            // -- a strange behavior for something that only gets called when full debug output is enabled.
            // For now, just skip the output and go on to the next plan.
            return;
        }

        // output a description of the parsed stmt
        json = "PLAN:\n" + json;
        json = "COST: " + String.valueOf(plan.cost) + "\n" + json;
        assert (plan.sql != null);
        json = "SQL: " + plan.sql + "\n" + json;

        // write json to disk
        BuildDirectoryUtils.writeFile("statement-all-plans/" + m_procName + "_" + m_stmtName,
                                      filename + "-json.txt",
                                      json);

        // create a graph friendly version
        BuildDirectoryUtils.writeFile("statement-all-plans/" + m_procName + "_" + m_stmtName,
                                      filename + ".dot",
                                      nodeList.toDOTString("name"));
    }

    /**
     * @param filename
     * @param filenameRenamed
     */
    private void renameFile(String filename, String filenameRenamed) {
        File file;
        File fileRenamed;
        file = new File(filename);
        fileRenamed = new File(filenameRenamed);
        file.renameTo(fileRenamed);
    }

    /**
     * @param stmtName
     * @param procName
     * @param bestFilename
     * @param stats
     */
    private void finalizeOutput(String bestFilename, PlanStatistics stats) {
        // find out where debugging is going
        String prefix = BuildDirectoryUtils.getBuildDirectoryPath() +
                "/" + BuildDirectoryUtils.rootPath + "statement-all-plans/" +
                m_procName + "_" + m_stmtName + "/";
        String winnerFilename, winnerFilenameRenamed;

        // if outputting full stuff
        if (m_fullDebug) {
            // rename the winner json plan
            winnerFilename = prefix + bestFilename + "-json.txt";
            winnerFilenameRenamed = prefix + "WINNER-" + bestFilename + "-json.txt";
            renameFile(winnerFilename, winnerFilenameRenamed);

            // rename the winner dot plan
            winnerFilename = prefix + bestFilename + ".dot";
            winnerFilenameRenamed = prefix + "WINNER-" + bestFilename + ".dot";
            renameFile(winnerFilename, winnerFilenameRenamed);
        }

        // rename the winner explain plan
        winnerFilename = prefix + bestFilename + ".txt";
        winnerFilenameRenamed = prefix + "WINNER-" + bestFilename + ".txt";
        renameFile(winnerFilename, winnerFilenameRenamed);

        if (m_fullDebug) {
            // output the plan statistics to disk for debugging
            BuildDirectoryUtils.writeFile("statement-stats", m_procName + "_" + m_stmtName + ".txt", stats.toString());
        }
    }
}
