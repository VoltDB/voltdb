package pmsg;
option java_package = "org.voltdb.pmsg";
option java_outer_classname = "DRAgent";

message UUID {
    required fixed64 instance = 1;
    required fixed64 count = 2;
}

message Ack {
    optional int32 partitionId = 1;
    optional fixed64 timestamp = 2;
}

message SnapshotReq {
    optional string nonce = 1;
}

message Reset {
    optional int32 partitionId = 1;
    optional fixed64 timestamp = 2;
}

message Pause {
    optional int32 partitionId = 1;
}

message Connect {
    optional int32 clusterId = 1;
    optional fixed64 persistInstanceId = 2;
}

message Subscribe {
    optional int32 partitionId = 1;
    optional fixed64 timestamp = 2;
    optional bool isCovering = 3;
    optional fixed64 rewindToUniqueId = 4;
    optional bool isSyncing = 5;
}

message EventAck {
    optional int32 partitionId = 1;
    // poison pill, cluster restart, rejoin
    optional int32 eventType = 2;
    // if true, the recipient should expect to have
    // a corresponding event to discard
    // if false, this is just a query for the next
    // unique id available for this partition
    optional bool lookForEvent = 3;
    // unique id of the last thing the receiver has
    // acked for this partition
    optional fixed64 lastAckedUniqueId = 4;
}

message Response {
    enum ReplicationMode {
        IDLE = 1;
        SYNCING_REPLICATED = 2;
        SYNCING_PARTITIONED = 3;
        ACTIVE = 4;
        UNAVAILABLE = 5;
    }
    required UUID id = 1;
    optional ReplicationMode mode = 2;
    optional fixed64 snapshotTimestamp = 3;
    optional fixed64 instanceIdHash = 4;
    optional string version = 5;
    // all known nodes globally
    //  first entry is self
    repeated NodeInfo nodeInfo = 6;
    optional int32 globalPartitionCount = 7;
    // local partitions
    repeated PartitionInfo partitionInfo = 8;
    // status. 0 means ok
    optional int32 status = 9 [default = 0];
    optional CtrlEnvelope.Type type = 10;
    optional fixed64 catalogCRC = 11;
    optional string catalogSignature = 12;
    optional string failureCause = 13;
}

message NodeInfo {
    optional string hostname = 1;
    optional int32 drport = 2;
    optional fixed64 catalogCRC = 3;
}

message PartitionInfo {
    optional int32 partitionId = 1;

    // info for active replication
    optional fixed64 lastSentTimestamp = 2;

    // info for syncing snapshots
    optional int64 lowestTupleIndex = 3;
    optional int64 lastSentTupleIndex = 4;
    optional int64 totalTupleCount = 5;

    // common info
    optional int64 outstandingBufferCount = 6;
    optional int64 outstandingByteCount = 7;
    optional bool isPaused = 8;
    optional bool isSynced = 9;

    // info for event synchronization
    optional int64 nextUniqueId = 10;
    optional bool isEnded = 11;
}

message CtrlEnvelope {
    enum Type {
        ACK = 1;
        RESET = 2;
        PAUSE = 3;
        QUERY = 4;
        RESPONSE = 5;
        SNAPSHOT_REQ = 6;
        SNAPSHOT_TERM = 7;
        STOP_SYNC = 8;
        CONNECT = 9;
        SUBSCRIBE = 10;
        EVENT_ACK = 11;
    }
    required Type type = 1;
    required UUID id = 2;
    optional Ack ack = 3;
    optional Reset reset = 4;
    optional Pause pause = 5;
    optional Response response = 6;
    optional SnapshotReq snapshotReq = 7;
    optional Subscribe subscribe = 8;
    optional EventAck eventAck = 9;
    optional Connect connect = 10;
}
