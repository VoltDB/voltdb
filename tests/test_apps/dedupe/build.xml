<?xml version="1.0" ?>
<project default="main" name="build file">

<!--
***************************************
PATHS AND PROPERTIES
***************************************
-->

<property environment="env"/>

<property name='volt.dir'              location='./voltdb-1.3.01/voltdb' />
<property name='build.dir'             location='obj/' />
<property name='src.dir'               location='src/' />
<property name='debugoutput.dir'       location='debugoutput/' />
<property name='junit.haltonfailure'   value='true' />

<property name='volt-server-list'      value='volt7b,volt7c,volt7d,volt7e' />

<path id='project.classpath'>
    <fileset dir="${volt.dir}">
        <include name="voltdb*.jar"/>
    </fileset>
    <pathelement location='${build.dir}' />
    <pathelement path="${java.class.path}"/>
</path>

<!--
***************************************
PRIMARY ENTRY POINTS
***************************************
-->

<target name="main" depends="srccompile, catalog" description="default. Compile Java stored procedures and then run the VoltDB compiler on the stored procedures and schema to generate a catalog" />

<target name="server" depends="srccompile" description="Start a VoltDB Server.">
    <java fork="yes" classname="org.voltdb.VoltDB">
        <jvmarg value="-Djava.library.path=${volt.dir}" />
        <jvmarg value="-server"/>
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-Xms512m"/>
        <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
        <jvmarg value="-XX:HeapDumpPath=/tmp" />
        <jvmarg value="-XX:-ReduceInitialCardMarks" />
        <jvmarg value="-Dlog4j.configuration=file:log-server.xml" />
        <arg value="catalog"/>
        <arg value="catalog.jar"/>
        <arg value="deployment"/>
        <arg value="deployment.xml"/>
        <arg value="host"/>
        <arg value="volt7b"/>
        <classpath refid='project.classpath'/>
        <assertions><disable/></assertions>
    </java>
</target>

<target name="catalog" depends="srccompile" description="Create the catalog." >
    <java fork="yes" classname="org.voltdb.compiler.VoltCompiler" >
        <jvmarg value="-Djava.library.path=${volt.dir}" />
        <arg value="project.xml"/>        <!-- project file -->
        <arg value="catalog.jar"/>        <!-- catalog name -->
        <classpath refid='project.classpath' />
        <assertions><disable /></assertions>
    </java>
</target>

<target name="client-random" depends="srccompile" description="Start the data generator client.">
    <java fork="yes" classname="com.ClientRandom">
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
        <jvmarg value="-XX:HeapDumpPath=/tmp" />
        <jvmarg value="-XX:-ReduceInitialCardMarks" />
        <jvmarg value="-Dlog4j.configuration=file:log-random.xml" />
        <arg value="999999"/>                                       <!-- maximum transactions per second -->
        <arg value="60"/>                                           <!-- feedback interval (seconds) -->
        <arg value="999999999"/>                                    <!-- client duration (seconds) -->
        <arg value="10000000"/>                                     <!-- total number of user -->
        <arg value="2"/>                                            <!-- total number of user applications -->
        <arg value="0"/>                                            <!-- offset timestamps by supplied number of days -->
        <arg value="3"/>                                            <!-- seconds to wait before recording latency information -->
        <arg value="${volt-server-list}"/>                          <!-- servers to connect to -->
        <arg value="3600"/>                                         <!-- reset latency min/max/avg every <x> seconds -->
        <classpath refid='project.classpath'/>
        <assertions><disable/></assertions>
    </java>
</target>

<target name="client-mover" depends="srccompile" description="Start the mover client, move records from unarchived to archived, write to file.">
    <java fork="yes" classname="com.ClientMover">
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
        <jvmarg value="-XX:HeapDumpPath=/tmp" />
        <jvmarg value="-XX:-ReduceInitialCardMarks" />
        <jvmarg value="-Dlog4j.configuration=file:log-mover.xml" />
        <arg value="5000"/>                                         <!-- number of moves per transaction -->
        <arg value="${volt-server-list}"/>                  <!-- servers to connect to -->
        <arg value="999999999"/>                                    <!-- client duration (seconds) -->
        <arg value="15"/>                                           <!-- loop pause duration (seconds), seconds to pause if no full "moves" occurred -->
        <classpath refid='project.classpath'/>
        <assertions><disable/></assertions>
    </java>
</target>

<target name="client-mover-el" depends="srccompile" description="Start the mover client, move records from unarchived to archived.">
    <java fork="yes" classname="com.ClientMoverEL">
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
        <jvmarg value="-XX:HeapDumpPath=/tmp" />
        <jvmarg value="-XX:-ReduceInitialCardMarks" />
        <jvmarg value="-Dlog4j.configuration=file:log-mover-el.xml" />
        <arg value="5000"/>                                         <!-- number of moves per transaction -->
        <arg value="${volt-server-list}"/>                  <!-- servers to connect to -->
        <arg value="999999999"/>                                    <!-- client duration (seconds) -->
        <arg value="15"/>                                           <!-- loop pause duration (seconds), seconds to pause if no full "moves" occurred -->
        <classpath refid='project.classpath'/>
        <assertions><disable/></assertions>
    </java>
</target>

<target name="client-export" description="Start the export client.">
    <java fork="yes" classname="org.voltdb.exportclient.ExportToFileClient">
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
        <jvmarg value="-XX:HeapDumpPath=/tmp" />
        <jvmarg value="-XX:-ReduceInitialCardMarks" />
        <jvmarg value="-Dlog4j.configuration=file:log-el.xml" />
        <arg value="--connect"/>
        <arg value="admin"/>                              <!-- client/admin : port to connect to -->
        <arg value="--servers"/>
        <arg value="${volt-server-list}"/>                <!-- list of servers to connect to, comma seperated -->
        <arg value="--nonce"/>
        <arg value="eltest"/>                             <!-- text to prepend to created files -->
        <arg value="--user"/>
        <arg value="foo"/>                                <!-- username (if using security) -->
        <arg value="--password"/>
        <arg value="bar"/>                                <!-- password (if using security) -->
        <arg value="--type"/>
        <arg value="csv"/>                                <!-- csv/tsv : csv for comma seperated files, tsv for tab seperated files -->
        <arg value="--outdir"/>
        <arg value="/tmp"/>                                <!-- output directory for EL files -->
        <classpath refid='project.classpath'/>
        <assertions><disable/></assertions>
    </java>
</target>

<target name="client-delete" depends="srccompile" description="Start the deleter client, remove all archived data that is not 'today'.">
    <java fork="yes" classname="com.ClientDelete">
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-XX:+HeapDumpOnOutOfMemoryError" />
        <jvmarg value="-XX:HeapDumpPath=/tmp" />
        <jvmarg value="-XX:-ReduceInitialCardMarks" />
        <jvmarg value="-Dlog4j.configuration=file:log-delete.xml" />
        <arg value="5000"/>                                         <!-- number of deletes per transaction -->
        <arg value="${volt-server-list}"/>                  <!-- servers to connect to -->
        <classpath refid='project.classpath'/>
        <assertions><disable/></assertions>
    </java>
</target>




<!--
***************************************
CLEANING
***************************************
-->

<target name='clean' description="remove all compiled files">
    <delete includeemptydirs="true" failonerror='false'>
        <fileset dir="${build.dir}" includes="**/*" />
        <fileset dir="${debugoutput.dir}" includes="**/*" />
        <fileset dir="." defaultexcludes="yes" >
            <include name="catalog.jar" />
        </fileset>
    </delete>
</target>

<!--
***************************************
JAVA COMPILATION
***************************************
-->

<target name="srccompile">
    <mkdir dir='${build.dir}' />
    <javac target="1.7" source="1.7" srcdir="${src.dir}" destdir='${build.dir}' debug='true'>
        <classpath refid="project.classpath" />
    </javac>
</target>

</project>
