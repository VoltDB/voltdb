
CREATE VIEW V_TEAM_TIMES(team, finish, total)
    AS SELECT team, finish, COUNT(*)
    FROM contest
    GROUP BY team, finish;

-- optimize ordering by count and expression of a group by column
CREATE INDEX runners_and_times ON V_TEAM_TIMES ( total, 0-SINCE_EPOCH(MILLISECOND, finish) );
-- optimize alternative ordering of group by columns
CREATE INDEX times_and_teams ON V_TEAM_TIMES ( finish, team );

CREATE TABLE DEPT_PEOPLE (ID INTEGER, DEPT INTEGER, AGE INTEGER, SALARY FLOAT, CHILDREN INTEGER, PRIMARY KEY (ID));
CREATE INDEX PREFIX_DEPT_PEOPLE_TREE ON DEPT_PEOPLE (DEPT);
CREATE INDEX FULL_DEPT_PEOPLE_TREE ON DEPT_PEOPLE (DEPT, AGE);
CREATE VIEW DEPT_AGE_MATVIEW (DEPT, AGE, NUM, MIN_SALARY, MAX_CHILDREN)
    AS SELECT DEPT, AGE, COUNT(*), MIN(SALARY), MAX(CHILDREN)
    FROM DEPT_PEOPLE
    GROUP BY DEPT, AGE;
CREATE VIEW DEPT_AGE_FILTER_MATVIEW(DEPT, AGE, CNT, MAX_CHILDREN)
    AS SELECT DEPT, AGE, COUNT(*), MAX(CHILDREN)
    FROM DEPT_PEOPLE
    WHERE SALARY >= 1000
    GROUP BY DEPT, AGE;

-- table and views for ENG-6511
CREATE TABLE ENG6511 (pid INTEGER NOT NULL, d1 INTEGER NOT NULL, d2 INTEGER NOT NULL, v1 INTEGER, v2 INTEGER NOT NULL);
PARTITION TABLE ENG6511 ON COLUMN pid;

CREATE INDEX IDX6511expR ON ENG6511 (d1, d2, abs(v1));
CREATE INDEX IDX6511d12 ON ENG6511 (d1, d2);
CREATE INDEX IDX6511 ON ENG6511 (d1, d2, v2);
CREATE INDEX IDX6511expL ON ENG6511 (d1+1, d2*2, v2);
CREATE INDEX IDX6511expLR ON ENG6511 (d1+1, d2*2, v2-1);
CREATE INDEX IDX6511CLT ON ENG6511 (d1, d2, v1) WHERE v1 < 4;
CREATE INDEX IDX6511CGT ON ENG6511 (d1, d2, v1) WHERE v1 > 4;
CREATE INDEX IDX6511NG1 ON ENG6511 (v1);
CREATE INDEX IDX6511NG2 ON ENG6511 (v2);

CREATE VIEW VENG6511 (d1, d2, cnt, vmin, vmax) AS
SELECT d1, d2, COUNT(*), MIN(v2) AS vmin, MAX(v2) AS vmax
FROM ENG6511 GROUP BY d1, d2;

CREATE VIEW VENG6511expL (d1, d2, cnt, vmin, vmax) AS
SELECT d1+1, d2*2, COUNT(*), MIN(v2) AS vmin, MAX(v2) AS vmax
FROM ENG6511 GROUP BY d1+1, d2*2;

CREATE VIEW VENG6511expR (d1, d2, cnt, vmin, vmax) AS
SELECT d1, d2, COUNT(*), MIN(abs(v1)) AS vmin, MAX(abs(v1)) AS vmax
FROM ENG6511 GROUP BY d1, d2;

CREATE VIEW VENG6511expLR (d1, d2, cnt, vmin, vmax) AS
SELECT d1+1, d2*2, COUNT(*), MIN(v2-1) AS vmin, MAX(v2-1) AS vmax
FROM ENG6511 GROUP BY d1+1, d2*2;

CREATE VIEW VENG6511C (d1, d2, cnt, vmin, vmax) AS
SELECT d1, d2, COUNT(*), MIN(v1) AS vmin, MAX(v1) AS vmax FROM ENG6511
WHERE v1 > 4 GROUP BY d1, d2;

CREATE VIEW VENG6511TwoIndexes (d1, d2, cnt, vmin, vmax) AS
SELECT d1, d2, COUNT(*), MIN(abs(v1)) AS vmin, MAX(v2) AS vmax FROM ENG6511
WHERE v1 > 4 GROUP BY d1, d2;

CREATE VIEW VENG6511NoGroup (cnt, vmin, vmax) AS
SELECT COUNT(*), MIN(v1) AS vmin, MAX(v2) AS vmax FROM ENG6511;

-- Tests for view on join queries.

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INTEGER NOT NULL,
    NAME VARCHAR(50) NOT NULL,
    ADDRESS VARCHAR(50),
    PRIMARY KEY (CUSTOMER_ID)
);

CREATE PROCEDURE UPDATECUSTOMERS AS
    UPDATE CUSTOMERS SET NAME=?, ADDRESS=? WHERE CUSTOMER_ID=? AND NAME=? AND ADDRESS=?;

CREATE TABLE ORDERS (
    ORDER_ID INTEGER NOT NULL,
    CUSTOMER_ID INTEGER NOT NULL,
    ORDER_TIME TIMESTAMP NOT NULL,
    PRIMARY KEY (ORDER_ID)
);
PARTITION TABLE ORDERS ON COLUMN ORDER_ID;

CREATE PROCEDURE UPDATEORDERS
PARTITION ON TABLE ORDERS COLUMN ORDER_ID PARAMETER 2 AS
    UPDATE ORDERS SET CUSTOMER_ID=?, ORDER_TIME=? WHERE ORDER_ID=? AND CUSTOMER_ID=? AND ORDER_TIME=?;

CREATE TABLE ORDERITEMS (
    ORDER_ID INTEGER NOT NULL,
    PID INTEGER NOT NULL,
    QTY INTEGER NOT NULL
);
PARTITION TABLE ORDERITEMS ON COLUMN ORDER_ID;
CREATE INDEX ORDERITEMS_BY_ID ON ORDERITEMS(ORDER_ID);

CREATE PROCEDURE DELETEORDERITEMS
PARTITION ON TABLE ORDERITEMS COLUMN ORDER_ID AS
    DELETE FROM ORDERITEMS WHERE ORDER_ID=? AND PID=?;