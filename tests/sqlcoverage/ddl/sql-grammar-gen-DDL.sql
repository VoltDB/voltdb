-- Define "standard" DDL (tables, views, indexes), for use with the SQL grammar generator

-- Drop all items first, in case they already exist
DROP TABLE R0 IF EXISTS CASCADE;
DROP TABLE P0 IF EXISTS CASCADE;
DROP TABLE R1 IF EXISTS CASCADE;
DROP TABLE P1 IF EXISTS CASCADE;
DROP TABLE R2 IF EXISTS CASCADE;
DROP TABLE P2 IF EXISTS CASCADE;
DROP TABLE R3 IF EXISTS CASCADE;
DROP TABLE P3 IF EXISTS CASCADE;
DROP TABLE R4 IF EXISTS CASCADE;
DROP TABLE P4 IF EXISTS CASCADE;
DROP TABLE R5 IF EXISTS CASCADE;
DROP TABLE P5 IF EXISTS CASCADE;

CREATE TABLE R0 (
  ID      INTEGER,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(14),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR            VARCHAR(64 BYTES),
  VCHAR_JSON       VARCHAR(1000),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY
);

CREATE TABLE P0 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(14),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR            VARCHAR(64 BYTES),
  VCHAR_JSON       VARCHAR(1000),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY
);
PARTITION TABLE P0 ON COLUMN ID;

CREATE TABLE R1 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(42 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR            VARCHAR(16),
  VCHAR_JSON       VARCHAR(4000 BYTES),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID)
);

CREATE TABLE P1 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(42 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR            VARCHAR(16),
  VCHAR_JSON       VARCHAR(4000 BYTES),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID)
);
PARTITION TABLE P1 ON COLUMN ID;

CREATE TABLE R2 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(14),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR            VARCHAR(64 BYTES),
  VCHAR_JSON       VARCHAR(1000),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID)
);
--OPTIONAL--CREATE UNIQUE INDEX IDX_R2_TINY ON R2 (TINY);
CREATE INDEX IDX_R2_BIG  ON R2 (BIG);
CREATE INDEX IDX_R2_DEC  ON R2 (DEC);
CREATE INDEX IDX_R2_VIM  ON R2 (VCHAR_INLINE_MAX);
CREATE INDEX IDX_R2_TIME ON R2 (TIME);
CREATE INDEX IDX_R2_POLY ON R2 (POLYGON);

CREATE TABLE P2 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(14),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR            VARCHAR(64 BYTES),
  VCHAR_JSON       VARCHAR(1000),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID)
);
PARTITION TABLE P2 ON COLUMN ID;
--OPTIONAL--CREATE ASSUMEUNIQUE INDEX IDX_P2_TINY ON P2 (TINY);
CREATE INDEX IDX_P2_BIG  ON P2 (BIG);
CREATE INDEX IDX_P2_DEC  ON P2 (DEC);
CREATE INDEX IDX_P2_VIM  ON P2 (VCHAR_INLINE_MAX);
CREATE INDEX IDX_P2_TIME ON P2 (TIME);
CREATE INDEX IDX_P2_POLY ON P2 (POLYGON);

CREATE TABLE R3 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(42 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR            VARCHAR(16),
  VCHAR_JSON       VARCHAR(4000 BYTES),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID)
);
--OPTIONAL--CREATE UNIQUE INDEX IDX_R3_TV ON R3 (TINY, VCHAR);
--OPTIONAL--CREATE UNIQUE INDEX IDX_R3_VSI ON R3 (VCHAR, SMALL, INT);

CREATE TABLE P3 (
  ID      INTEGER,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(42 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR            VARCHAR(16) NOT NULL,
  VCHAR_JSON       VARCHAR(4000 BYTES),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (VCHAR)
);
PARTITION TABLE P3 ON COLUMN VCHAR;
--OPTIONAL--CREATE       UNIQUE INDEX IDX_P3_TV  ON P3 (TINY, VCHAR);
--OPTIONAL--CREATE ASSUMEUNIQUE INDEX IDX_P3_VSI ON P3 (VCHAR_INLINE_MAX, SMALL, INT);

CREATE TABLE R4 (
  ID      INTEGER NOT NULL,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(14),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR            VARCHAR(64 BYTES) NOT NULL,
  VCHAR_JSON       VARCHAR(1000),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID, VCHAR)
);
-- TODO: add more indexes, here and below

CREATE TABLE P4 (
  ID      INTEGER,
  TINY    TINYINT,
  SMALL   SMALLINT,
  INT     INTEGER,
  BIG     BIGINT,
  NUM     FLOAT,
  DEC     DECIMAL,
  VCHAR_INLINE     VARCHAR(14),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR            VARCHAR(64 BYTES) NOT NULL,
  VCHAR_JSON       VARCHAR(1000),
  TIME    TIMESTAMP,
  VARBIN  VARBINARY(100),
  POINT   GEOGRAPHY_POINT,
  POLYGON GEOGRAPHY,
  PRIMARY KEY (ID, VCHAR)
);
PARTITION TABLE P4 ON COLUMN VCHAR;

CREATE TABLE R5 (
  ID      INTEGER  NOT NULL,
  TINY    TINYINT  NOT NULL,
  SMALL   SMALLINT NOT NULL,
  INT     INTEGER  NOT NULL,
  BIG     BIGINT   NOT NULL,
  NUM     FLOAT    NOT NULL,
  DEC     DECIMAL  NOT NULL,
  VCHAR_INLINE     VARCHAR(42 BYTES)   NOT NULL,
  VCHAR_INLINE_MAX VARCHAR(15)         NOT NULL,
  VCHAR            VARCHAR(16)         NOT NULL,
  VCHAR_JSON       VARCHAR(4000 BYTES) NOT NULL,
  TIME    TIMESTAMP       NOT NULL,
  VARBIN  VARBINARY(100)  NOT NULL,
  POINT   GEOGRAPHY_POINT NOT NULL,
  POLYGON GEOGRAPHY       NOT NULL,
  PRIMARY KEY (VCHAR, ID)
);

CREATE TABLE P5 (
  ID      INTEGER  NOT NULL,
  TINY    TINYINT  NOT NULL,
  SMALL   SMALLINT NOT NULL,
  INT     INTEGER  NOT NULL,
  BIG     BIGINT   NOT NULL,
  NUM     FLOAT    NOT NULL,
  DEC     DECIMAL  NOT NULL,
  VCHAR_INLINE     VARCHAR(42 BYTES)   NOT NULL,
  VCHAR_INLINE_MAX VARCHAR(15)         NOT NULL,
  VCHAR            VARCHAR(16)         NOT NULL,
  VCHAR_JSON       VARCHAR(4000 BYTES) NOT NULL,
  TIME    TIMESTAMP       NOT NULL,
  VARBIN  VARBINARY(100)  NOT NULL,
  POINT   GEOGRAPHY_POINT NOT NULL,
  POLYGON GEOGRAPHY       NOT NULL,
  PRIMARY KEY (VCHAR, ID)
);
PARTITION TABLE P5 ON COLUMN ID;



CREATE VIEW VR1 (TINY,
    ID, SMALL, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT TINY,
    COUNT(*), SUM(SMALL), COUNT(INT), MIN(BIG), MAX(NUM), SUM(DEC),
    MIN(VCHAR_INLINE), MIN(VCHAR_INLINE_MAX), MIN(VCHAR), MIN(VCHAR_JSON), MIN(TIME)
    --OPTIONAL--, MIN(VARBIN), MIN(POINT), MIN(POLYGON)
  FROM R1
GROUP BY TINY;

CREATE VIEW VP1 (TINY,
    ID, SMALL, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT TINY,
    COUNT(*), SUM(SMALL), COUNT(INT), MIN(BIG), MAX(NUM), SUM(DEC),
    MIN(VCHAR_INLINE), MIN(VCHAR_INLINE_MAX), MIN(VCHAR), MIN(VCHAR_JSON), MIN(TIME)
    --OPTIONAL--, MIN(VARBIN), MIN(POINT), MIN(POLYGON)
  FROM P1
GROUP BY TINY;


CREATE VIEW VR2 (TINY,
    ID, SMALL, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT TINY,
    COUNT(*), COUNT(SMALL), MIN(INT), MAX(BIG), SUM(NUM), MIN(DEC),
    MAX(VCHAR_INLINE), MAX(VCHAR_INLINE_MAX), MAX(VCHAR), MAX(VCHAR_JSON), MAX(TIME)
    --OPTIONAL--, MAX(VARBIN), MAX(POINT), MAX(POLYGON)
  FROM R2 WHERE ABS(TINY) < 64
GROUP BY TINY;

CREATE VIEW VP2 (TINY,
    ID, SMALL, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR, VCHAR_JSON,TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT TINY,
    COUNT(*), COUNT(SMALL), MIN(INT), MAX(BIG), SUM(NUM), MIN(DEC),
    MAX(VCHAR_INLINE), MAX(VCHAR_INLINE_MAX), MAX(VCHAR), MAX(VCHAR_JSON), MAX(TIME)
    --OPTIONAL--, MAX(VARBIN), MAX(POINT), MAX(POLYGON)
  FROM P2 WHERE ABS(TINY) < 64
GROUP BY TINY;


CREATE VIEW VR3 (VCHAR_INLINE_MAX,
    ID, TINY, SMALL, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT VCHAR_INLINE_MAX,
    COUNT(*), COUNT(TINY), MIN(SMALL), MAX(INT), SUM(BIG), MIN(NUM), MAX(DEC),
    MIN(VCHAR_INLINE), MAX(VCHAR), MAX(VCHAR_JSON), MIN(TIME)
    --OPTIONAL--, MAX(VARBIN), MIN(POINT), MAX(POLYGON)
  FROM R3
GROUP BY VCHAR_INLINE_MAX;

CREATE VIEW VP3 (VCHAR_INLINE_MAX,
    ID, TINY, SMALL, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT VCHAR_INLINE_MAX,
    COUNT(*), COUNT(TINY), MIN(SMALL), MAX(INT), SUM(BIG), MIN(NUM), MAX(DEC),
    MIN(VCHAR_INLINE), MAX(VCHAR), MAX(VCHAR_JSON), MIN(TIME)
    --OPTIONAL--, MAX(VARBIN), MIN(POINT), MAX(POLYGON)
  FROM P3
GROUP BY VCHAR_INLINE_MAX;


CREATE VIEW VR4 (VCHAR, BIG,
    ID, TINY, SMALL, INT, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT VCHAR, BIG,
    COUNT(*), SUM(TINY), MAX(SMALL), COUNT(VCHAR_INLINE_MAX), MAX(NUM), MIN(DEC),
    MAX(VCHAR_INLINE), MIN(VCHAR_INLINE_MAX), MIN(VCHAR_JSON), MAX(TIME)
    --OPTIONAL--, MIN(VARBIN), MAX(POINT), MIN(POLYGON)
  FROM R4 WHERE VCHAR_INLINE < 'N'
GROUP BY VCHAR, BIG;

CREATE VIEW VP4 (VCHAR, BIG,
    ID, TINY, SMALL, INT, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT VCHAR, BIG,
    COUNT(*), SUM(TINY), MAX(SMALL), COUNT(VCHAR_INLINE_MAX), MAX(NUM), MIN(DEC),
    MAX(VCHAR_INLINE), MIN(VCHAR_INLINE_MAX), MIN(VCHAR_JSON), MAX(TIME)
    --OPTIONAL--, MIN(VARBIN), MAX(POINT), MIN(POLYGON)
  FROM P4 WHERE VCHAR_INLINE < 'N'
GROUP BY VCHAR, BIG;


CREATE VIEW VR5 (SMALL, VCHAR, TINY,
    ID, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT SMALL, VCHAR, TINY,
    COUNT(*), COUNT(TIME), COUNT(POINT), SUM(NUM), SUM(DEC),
    MIN(VCHAR_INLINE), MAX(VCHAR_INLINE_MAX), MAX(VCHAR_JSON), MIN(TIME)
    --OPTIONAL--, MAX(VARBIN), MIN(POINT), MAX(POLYGON)
  FROM R5 WHERE TINY < 64
GROUP BY SMALL, VCHAR, TINY;

CREATE VIEW VP5 (SMALL, VCHAR, TINY,
    ID, INT, BIG, NUM, DEC,
    VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR_JSON, TIME
    --OPTIONAL--, VARBIN, POINT, POLYGON
    ) AS
  SELECT SMALL, VCHAR, TINY,
    COUNT(*), COUNT(VARBIN), COUNT(POLYGON), SUM(NUM), SUM(DEC),
    MIN(VCHAR_INLINE), MAX(VCHAR_INLINE_MAX), MAX(VCHAR_JSON), MIN(TIME)
    --OPTIONAL--, MAX(VARBIN), MIN(POINT), MAX(POLYGON)
  FROM P5 WHERE TINY < 64
GROUP BY SMALL, VCHAR, TINY;

