CREATE TABLE P1 (
  ID INTEGER DEFAULT '0' NOT NULL,
  VCHAR VARCHAR(64 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR_INLINE VARCHAR(42 BYTES),
  RATIO FLOAT NOT NULL,
  PRIMARY KEY (ID)
);
PARTITION TABLE P1 ON COLUMN ID;

CREATE TABLE P2 (
  ID INTEGER DEFAULT '0' NOT NULL,
  VCHAR VARCHAR(64 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR_INLINE VARCHAR(42 BYTES),
  RATIO FLOAT NOT NULL,
  PRIMARY KEY (ID)
);
PARTITION TABLE P2 ON COLUMN ID;

CREATE TABLE P3 (
  ID INTEGER DEFAULT '0' NOT NULL,
  VCHAR VARCHAR(64 BYTES),
  VCHAR_INLINE_MAX VARCHAR(15),
  VCHAR_INLINE VARCHAR(42 BYTES),
  RATIO FLOAT NOT NULL,
  PRIMARY KEY (ID)
);
PARTITION TABLE P3 ON COLUMN ID;

CREATE TABLE R1 (
  ID INTEGER DEFAULT '0' NOT NULL,
  VCHAR VARCHAR(5000),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR_INLINE VARCHAR(14),
  RATIO FLOAT NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE R2 (
  ID INTEGER DEFAULT '0' NOT NULL,
  VCHAR VARCHAR(5000),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR_INLINE VARCHAR(14),
  RATIO FLOAT NOT NULL,
  PRIMARY KEY (ID)
);

CREATE TABLE R3 (
  ID INTEGER DEFAULT '0' NOT NULL,
  VCHAR VARCHAR(5000),
  VCHAR_INLINE_MAX VARCHAR(63 BYTES),
  VCHAR_INLINE VARCHAR(14),
  RATIO FLOAT NOT NULL,
  PRIMARY KEY (ID)
);

-- Define some Materialized Views using Joins; note that we mostly use the same
-- column names used above in the table definitions, since those are the only
-- column names that will be used explicitly in SELECT statements generated from
-- query templates (though SELECT * is also sometimes used, so all columns will
-- be tested, to some extent)

-- Minimal Materialized Views using Joins with 1 column: COUNT(*) only
CREATE VIEW V0 (ID) AS
  SELECT COUNT(*) FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID;

CREATE VIEW V1 (ID) AS
  SELECT COUNT(*) FROM P1 T1 JOIN R1 T2 ON T1.VCHAR = T2.VCHAR;

CREATE VIEW V2 (ID) AS
  SELECT COUNT(*) FROM R1 T1 JOIN R2 T2 ON T1.VCHAR = T2.VCHAR_INLINE_MAX;


-- "Simple" Materialized Views using Joins with 2 columns: 1 COUNT(*), 1 Aggregate Function
CREATE VIEW V3 (ID, VCHAR_INLINE) AS
  SELECT COUNT(*),   MIN(T2.VCHAR_INLINE) FROM P1 T1 JOIN P2 T2 USING(ID);

CREATE VIEW V4 (ID, VCHAR) AS
  SELECT COUNT(*),   MAX(T2.VCHAR) FROM P1 T1 JOIN R1 T2 ON T1.VCHAR_INLINE = T2.VCHAR;

CREATE VIEW V5 (VCHAR_INLINE_MAX, ID) AS
  SELECT COUNT(*),   SUM(T1.ID)    FROM R2 T1 JOIN P2 T2 USING(VCHAR_INLINE_MAX);

CREATE VIEW V6 (ID, VCHAR_INLINE_MAX) AS
  SELECT COUNT(*), COUNT(T1.VCHAR_INLINE_MAX)   FROM R1 T1 JOIN R2 T2 ON T1.ID = T2.ID;


-- "Simple" Materialized Views using Joins with 2 columns: 1 GROUP BY, 1 COUNT(*)
CREATE VIEW V7 (VCHAR_INLINE, ID) AS
  SELECT   T1.VCHAR_INLINE, COUNT(*) FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID
  GROUP BY T1.VCHAR_INLINE;

CREATE VIEW V8 (VCHAR_INLINE_MAX, ID) AS
  SELECT   T1.VCHAR_INLINE_MAX,   COUNT(*) FROM P1 T1 JOIN R1 T2 ON T1.ID = T2.ID
  GROUP BY T1.VCHAR_INLINE_MAX;

CREATE VIEW V9 (VCHAR, ID) AS
  SELECT   T1.VCHAR, COUNT(*) FROM R2 T1 JOIN P2 T2 ON T1.VCHAR_INLINE_MAX = T2.VCHAR
  GROUP BY T1.VCHAR;

CREATE VIEW V10 (ID, VCHAR_INLINE_MAX) AS
  SELECT   T1.ID,    COUNT(*) FROM R1 T1 JOIN R2 T2 USING(VCHAR_INLINE_MAX)
  GROUP BY T1.ID;


-- "Normal" Materialized Views using Joins with 3 columns: 1 GROUP BY, 1 COUNT(*), 1 Aggregate Function
CREATE VIEW V11 (VCHAR, ID, VCHAR_INLINE_MAX) AS
  SELECT   T1.VCHAR, COUNT(*),   MIN(T1.VCHAR_INLINE_MAX)   FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID
  GROUP BY T1.VCHAR;

CREATE VIEW V12 (VCHAR_INLINE_MAX, ID, VCHAR_INLINE) AS
  SELECT   T1.VCHAR_INLINE_MAX,   COUNT(*),   MAX(T2.VCHAR_INLINE) FROM P1 T1 JOIN P2 T2 USING(ID)
  GROUP BY T1.VCHAR_INLINE_MAX;

CREATE VIEW V13 (VCHAR_INLINE, VCHAR_INLINE_MAX, ID) AS
  SELECT   T2.VCHAR_INLINE, COUNT(*),   SUM(T1.ID)    FROM P1 T1 JOIN R1 T2 USING(ID)
  GROUP BY T2.VCHAR_INLINE;

CREATE VIEW V14 (ID, VCHAR_INLINE_MAX, VCHAR) AS
  SELECT   T2.ID,    COUNT(*), COUNT(T2.VCHAR) FROM P1 T1 JOIN R1 T2 ON T1.VCHAR = T2.VCHAR_INLINE_MAX
  GROUP BY T2.ID;

CREATE VIEW V15 (VCHAR_INLINE, ID, VCHAR) AS
  SELECT   T1.VCHAR_INLINE, COUNT(*),   MIN(T2.VCHAR) FROM R2 T1 JOIN P2 T2 ON T1.VCHAR_INLINE_MAX = T2.VCHAR_INLINE_MAX
  GROUP BY T1.VCHAR_INLINE;

CREATE VIEW V16 (ID, COUNT_STAR, VCHAR_INLINE_MAX) AS
  SELECT   T2.VCHAR_INLINE_MAX,   COUNT(*),   MAX(T1.VCHAR_INLINE_MAX)   FROM R1 T1 JOIN R2 T2 ON T1.ID = T2.ID
  GROUP BY T2.VCHAR_INLINE_MAX;

CREATE VIEW V17 (VCHAR, ID, VCHAR_INLINE) AS
  SELECT   T1.VCHAR, COUNT(*),   MIN(T2.VCHAR_INLINE) FROM R1 T1 JOIN R2 T2 ON T1.VCHAR_INLINE_MAX = T2.VCHAR
  GROUP BY T1.VCHAR;

CREATE VIEW V18 (VCHAR_INLINE_MAX, COUNT_STAR, ID) AS
  SELECT   T1.VCHAR_INLINE_MAX,   COUNT(*), COUNT(T1.ID)    FROM R1 T1 JOIN R2 T2 USING(VCHAR_INLINE_MAX)
  GROUP BY T1.VCHAR_INLINE_MAX;


-- "Normal-plus" Materialized Views using Joins with 4 or more columns
CREATE VIEW V19 (VCHAR_INLINE, ID, VCHAR_INLINE_MAX, VCHAR) AS
  SELECT   T1.VCHAR_INLINE,           COUNT(*), COUNT(T2.VCHAR_INLINE_MAX),     MAX(T2.VCHAR) FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID
  GROUP BY T1.VCHAR_INLINE;

CREATE VIEW V20 (ID, VCHAR_INLINE, VCHAR_INLINE_MAX, VCHAR) AS
  SELECT   T1.ID,    T2.VCHAR_INLINE, COUNT(*),   MIN(T1.VCHAR)                  FROM P1 T1 JOIN R1 T2 ON T1.VCHAR  = T2.VCHAR_INLINE_MAX
  GROUP BY T1.ID,    T2.VCHAR_INLINE;

CREATE VIEW V21 (VCHAR_INLINE_MAX, VCHAR, COUNT_STAR, VCHAR_INLINE, ID) AS
  SELECT   T2.VCHAR_INLINE_MAX,   T2.VCHAR, COUNT(*),   MIN(T1.VCHAR_INLINE), COUNT(T2.ID)    FROM R2 T1 JOIN P2 T2 ON T1.VCHAR  = T2.VCHAR_INLINE_MAX
  GROUP BY T2.VCHAR_INLINE_MAX,   T2.VCHAR;

CREATE VIEW V22 (VCHAR, VCHAR_INLINE_MAX, COUNT_STAR, ID, VCHAR_INLINE) AS
  SELECT   T1.VCHAR, T2.VCHAR_INLINE_MAX,   COUNT(*),   MAX(T2.ID),      MIN(T1.VCHAR_INLINE) FROM R1 T1 JOIN R2 T2 ON T1.VCHAR_INLINE_MAX = T2.VCHAR_INLINE_MAX
  GROUP BY T1.VCHAR, T2.VCHAR_INLINE_MAX;

CREATE VIEW V23 (VCHAR_INLINE_MAX, VCHAR, VCHAR_INLINE_MAX2, COUNT_STAR, ID, VCHAR_INLINE, VCHAR_INLINE2) AS
  SELECT   T1.VCHAR_INLINE_MAX, T1.VCHAR, T2.VCHAR_INLINE_MAX, COUNT(*), MIN(T2.ID), MAX(T1.VCHAR_INLINE), MAX(T2.VCHAR_INLINE) FROM P1 T1 JOIN R1 T2 ON T1.ID = T2.ID
  GROUP BY T1.VCHAR_INLINE_MAX, T1.VCHAR, T2.VCHAR_INLINE_MAX;


-- "Abnormal" Materialized Views using Joins that are not equi-joins (cannot use 2 partitioned tables)
CREATE VIEW V24 (VCHAR_INLINE_MAX, ID, VCHAR_INLINE_MAX2) AS
  SELECT   T1.VCHAR_INLINE_MAX,   COUNT(*),   MIN(T2.VCHAR_INLINE_MAX)   FROM P1 T1 JOIN R1 T2 ON T1.ID  <  T2.ID
  GROUP BY T1.VCHAR_INLINE_MAX;

CREATE VIEW V25 (VCHAR_INLINE, ID, VCHAR) AS
  SELECT   T1.VCHAR_INLINE, COUNT(*),   MAX(T2.VCHAR) FROM R2 T1 JOIN P2 T2 ON T1.VCHAR  >  T2.VCHAR_INLINE_MAX
  GROUP BY T1.VCHAR_INLINE;

CREATE VIEW V26 (ID, VCHAR_INLINE_MAX, VCHAR_INLINE) AS
  SELECT   T1.ID,    COUNT(*),   MAX(T2.VCHAR_INLINE) FROM R1 T1 JOIN R2 T2 ON T1.VCHAR_INLINE_MAX <= T2.VCHAR_INLINE_MAX
  GROUP BY T1.ID;

CREATE VIEW V27 (VCHAR, ID, VCHAR_INLINE_MAX) AS
  SELECT   T1.VCHAR, COUNT(*), COUNT(T2.VCHAR_INLINE_MAX)   FROM R1 T1 JOIN R2 T2 ON T1.VCHAR_INLINE  >= T2.VCHAR_INLINE_MAX
  GROUP BY T1.VCHAR;


-- Cross-joins (cannot cross-join 2 partitioned tables)
CREATE VIEW V28 (VCHAR_INLINE_MAX, ID, VCHAR) AS
  SELECT   T1.VCHAR_INLINE_MAX,   COUNT(*),   MIN(T2.VCHAR) FROM P1 T1 CROSS JOIN R1 T2
  GROUP BY T1.VCHAR_INLINE_MAX;

CREATE VIEW V29 (VCHAR, ID, VCHAR_INLINE) AS
  SELECT   T1.VCHAR, COUNT(*),   MAX(T2.VCHAR_INLINE) FROM R2 T1 CROSS JOIN P2 T2
  GROUP BY T1.VCHAR;

CREATE VIEW V30 (VCHAR_INLINE, ID, VCHAR_INLINE_MAX) AS
  SELECT   T1.VCHAR_INLINE, COUNT(*), COUNT(T2.VCHAR_INLINE_MAX)   FROM R1 T1 CROSS JOIN R2 T2
  GROUP BY T1.VCHAR_INLINE;


-- "Complex" Materialized Views using Joins on 3 tables
CREATE VIEW V31 (VCHAR, COUNT_STAR, VCHAR_INLINE_MAX, ID) AS
  SELECT   T1.VCHAR, COUNT(*),   MIN(T2.VCHAR_INLINE_MAX),   COUNT(T3.VCHAR_INLINE) FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID JOIN P3 T3 ON T2.ID = T3.ID
  GROUP BY T1.VCHAR;

CREATE VIEW V32 (VCHAR_INLINE_MAX, ID, VCHAR_INLINE, VCHAR) AS
  SELECT   T1.VCHAR_INLINE_MAX,   COUNT(*),   MAX(T2.VCHAR_INLINE),   MIN(T3.VCHAR) FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID JOIN R1 T3 ON T2.ID = T3.ID
  GROUP BY T1.VCHAR_INLINE_MAX;

CREATE VIEW V33 (VCHAR_INLINE, COUNT_STAR, ID, VCHAR_INLINE_MAX) AS
  SELECT   T1.VCHAR_INLINE, COUNT(*), COUNT(T2.VCHAR),   COUNT(T3.VCHAR_INLINE_MAX)   FROM P1 T1 JOIN R1 T2 ON T1.ID = T2.ID JOIN R2 T3 ON T2.ID = T3.ID
  GROUP BY T1.VCHAR_INLINE;

CREATE VIEW V34 (VCHAR_INLINE, ID, VCHAR_INLINE_MAX, VCHAR) AS
  SELECT   T1.VCHAR_INLINE, COUNT(*),   MIN(T2.VCHAR_INLINE_MAX),     MAX(T3.VCHAR) FROM R1 T1 JOIN R2 T2 ON T1.ID = T2.ID JOIN R3 T3 ON T2.ID = T3.ID
  GROUP BY T1.VCHAR_INLINE;


-- Joins on 4 tables!
CREATE VIEW V35 (VCHAR, VCHAR_INLINE_MAX, COUNT_STAR, VCHAR_INLINE, ID) AS
  SELECT   T1.VCHAR, T2.VCHAR_INLINE_MAX,   COUNT(*), MIN(T3.VCHAR_INLINE), COUNT(T4.VCHAR) FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID JOIN R1 T3 ON T2.ID = T3.ID JOIN R2 T4 ON T2.ID = T4.ID
  GROUP BY T1.VCHAR, T2.VCHAR_INLINE_MAX;

CREATE VIEW V36 (VCHAR_INLINE_MAX, VCHAR_INLINE, COUNT_STAR, VCHAR, ID) AS
  SELECT   T1.VCHAR_INLINE_MAX,   T2.VCHAR_INLINE, COUNT(*), MAX(T3.VCHAR),   SUM(T4.ID)    FROM P1 T1 JOIN P2 T2 ON T1.ID = T2.ID JOIN R1 T3 ON T2.ID = T3.ID JOIN R2 T4 ON T3.ID = T4.ID
  GROUP BY T1.VCHAR_INLINE_MAX,   T2.VCHAR_INLINE;
