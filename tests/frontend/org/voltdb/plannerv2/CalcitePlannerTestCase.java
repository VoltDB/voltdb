/* This file is part of VoltDB.
 * Copyright (C) 2008-2019 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package org.voltdb.plannerv2;

import java.util.Collections;
import java.util.Map;

import org.apache.calcite.plan.RelOptUtil;
import org.apache.calcite.rel.RelNode;
import org.apache.calcite.sql.SqlNode;
import org.apache.calcite.tools.RelConversionException;
import org.apache.calcite.tools.ValidationException;
import org.voltdb.compiler.DeterminismMode;
import org.voltdb.compiler.PlannerTool;
import org.voltdb.expressions.ParameterValueExpression;
import org.voltdb.planner.CompiledPlan;

import org.voltdb.plannodes.AbstractPlanNode;
import org.voltdb.plannodes.PlanNodeTree;
import org.voltdb.types.PlannerType;

/**
 * An abstract base class for implementing tests against CalcitePlanner.
 * Most of the implementations is taken from Mike A.
 */
public abstract class CalcitePlannerTestCase extends Plannerv2TestCase {

    /**
     * Compile a plan using the Calcite Planner
     *
     * @param sql               SQL statement
     * @param inferPartitioning Flag to indicate whether to use infer or forced partitioning
     *                          when generating plan. True to use infer partitioning info,
     *                          false for forced partitioning
     * @param forcedSP          Flag to indicate whether to generate plan for forced SP or MP.
     *                          If inferPartitioing flag is set to true, this flag is ignored
     * @param detMode           Specifies determinism mode - Faster or Safer
     * @return Compiled plan based on specified input parameters
     */
    protected CompiledPlan compileAdHocCalcitePlan(String sql,
                                                   boolean inferPartitioning,
                                                   boolean forcedSP,
                                                   DeterminismMode detMode) {
        SqlNode sqlNode;
        VoltPlanner planner = new VoltPlanner(getSchemaPlus());
        try {
            sqlNode = planner.parse(sql);
        } catch (Throwable e) {
            throw new RuntimeException("Error while parsing query: " + sql, e);
        }
        CompiledPlan cp;
        try {
            cp = PlannerTool.getCompiledPlanCalcite(getSchemaPlus(), sqlNode);
        } catch (ValidationException e) {
            throw new RuntimeException("Error while Validating query: " + sql, e);
        } catch (RelConversionException e) {
            throw new RuntimeException("Error while Converting query: " + sql, e);
        }
        assertNotNull(cp);
        return cp;
    }

    /**
     * Compile a plan using the VoltDB Planner
     *
     * @param sql               SQL statement
     * @param inferPartitioning Flag to indicate whether to use infer or forced partitioning
     *                          when generating plan. True to use infer partitioning info,
     *                          false for forced partitioning
     * @param forcedSP          Flag to indicate whether to generate plan for forced SP or MP.
     *                          If inferPartitioing flag is set to true, this flag is ignored
     * @return Compiled plan based on specified input parameters
     */
    protected CompiledPlan compileAdHocPlan(String sql,
                                            boolean inferPartitioning,
                                            boolean forcedSP) {
        return compileAdHocPlan(sql, inferPartitioning, forcedSP, DeterminismMode.SAFER);
    }

    /**
     * Compare the plan generated by CalcitePlanner and VoltPlanner to check if they are equal.
     *
     * @param sql the SQL statement to plan
     */
    protected void comparePlans(String sql) {
        comparePlans(sql, Collections.emptyMap());
    }

    /**
     * Compare the plan generated by CalcitePlanner and VoltPlanner to check if they are equal.
     *
     * @param sql       the SQL statement to plan
     * @param ignoreMap the <key, value> pairs that we will replace the key strings in the calcite
     *                  plan result as value strings. It is used to ignore some minor difference
     *                  between Calcite plan result to Volt plan result.
     */
    protected void comparePlans(String sql, Map<String, String> ignoreMap) {
        CompiledPlan voltdbPlan = compileAdHocPlan(sql, true, true);
        CompiledPlan calcitePlan = compileAdHocCalcitePlan(sql, true, true, DeterminismMode.SAFER);

        // Compare roots
        comparePlanTree(calcitePlan.rootPlanGraph, voltdbPlan.rootPlanGraph, ignoreMap);
        // Compare lower fragments if any
        if (calcitePlan.subPlanGraph != null && voltdbPlan.subPlanGraph != null) {
            comparePlanTree(calcitePlan.subPlanGraph, voltdbPlan.subPlanGraph, ignoreMap);
        } else if (calcitePlan.subPlanGraph != null || voltdbPlan.subPlanGraph != null) {
            fail(String.format("Two-part MP plans mismatch.\n\nVoltDB plan: %s\n\nCalcite plan:%s\n", voltdbPlan.subPlanGraph.toExplainPlanString(), calcitePlan.subPlanGraph.toExplainPlanString()));
        }
        // Compare CompiledPlan attributes
        compareCompiledPlans(calcitePlan, voltdbPlan);
    }

    protected void comparePlanTree(AbstractPlanNode calcitePlanNode, AbstractPlanNode voltdbPlanNode, Map<String, String> ignoreMap) {
        PlanNodeTree calcitePlanTree = new PlanNodeTree(calcitePlanNode);
        PlanNodeTree voltdbPlanTree = new PlanNodeTree(voltdbPlanNode);

        String calcitePlanTreeJSON = calcitePlanTree.toJSONString();
        String voltdbPlanTreeJSON = voltdbPlanTree.toJSONString();

        for (Map.Entry<String, String> ignore : ignoreMap.entrySet()) {
            calcitePlanTreeJSON = calcitePlanTreeJSON.replace(ignore.getKey(), ignore.getValue());
        }
        assertEquals(voltdbPlanTreeJSON, calcitePlanTreeJSON);
    }

    protected void compareCompiledPlans(CompiledPlan calcitePlan, CompiledPlan voltdbPlan) {
        // Compare LIMIT/OFFSET
        assertEquals("Plans with different limit or offset",
                voltdbPlan.hasLimitOrOffset(), calcitePlan.hasLimitOrOffset());
        // Determinism
        assertEquals("Plans with different determinism",
                voltdbPlan.hasDeterministicStatement(), calcitePlan.hasDeterministicStatement());
        // Params
        ParameterValueExpression[] voltdbParams = voltdbPlan.getParameters();
        ParameterValueExpression[] calciteParams = calcitePlan.getParameters();
        assertEquals("Plans with different parameter number", voltdbParams.length, calciteParams.length);
        for (int i = 0; i < voltdbParams.length; ++i) {
            assertEquals("The " + i + "-th parameter differ", voltdbParams[i].getParameterIndex(), calciteParams[i].getParameterIndex());
        }
    }

    /**
     * Generate the JSON string representation of the plan tree.
     *
     * @param sql         the SQL statement to plan
     * @param plannerType the planner type
     * @return the JSON string representation of the plan tree
     */
    protected String toJSONPlan(String sql, PlannerType plannerType) {
        CompiledPlan compiledPlan = (plannerType == PlannerType.CALCITE) ?
                compileAdHocCalcitePlan(sql, true, true, DeterminismMode.SAFER) :
                compileAdHocPlan(sql, true, true);
        assertNotNull("Root plan graph is null", compiledPlan.rootPlanGraph);
        PlanNodeTree planTree = new PlanNodeTree(compiledPlan.rootPlanGraph);
        String planTreeJSON = planTree.toJSONString();
        if (compiledPlan.subPlanGraph != null) {
            PlanNodeTree subPlanTree = new PlanNodeTree(compiledPlan.subPlanGraph);
            String subPlanTreeJSON = subPlanTree.toJSONString();
            planTreeJSON += subPlanTreeJSON;
        }
        return planTreeJSON;
    }

    /**
     * Verify if the string representation of a RelNode matches the expected string.
     *
     * @param expectedRelNodeStr the expected string
     * @param relNode            the string representation of a RelNode
     */
    protected void verifyRelNode(String expectedRelNodeStr, RelNode relNode) {
        String relNodeStr = RelOptUtil.toString(relNode);
        assertEquals(expectedRelNodeStr, relNodeStr);
    }
}
