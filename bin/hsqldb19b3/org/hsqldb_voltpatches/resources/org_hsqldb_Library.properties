rand(java.lang.Integer)=Returns the next pseudorandom, uniformly distributed <CODE>double</CODE> value between 0.0 and 1.0 from a single, system-wide random number generator's sequence, optionally re-seeding (and thus resetting) the generator sequence. If the seed value is <CODE>null</CODE>, then the underlying random number generator retrieves the next value in its current sequence, else the seed alters the state of the generator object so as to be in exactly the same state as if it had just been created with the seed value.
rand(java.lang.Integer)@0=the next pseudorandom, uniformly distributed <CODE>double</CODE> value between 0.0 and 1.0
rand(java.lang.Integer)@1=seed - an optional parameter with which to reseed the underlying pseudorandom number generator
abs(double)=Returns the absolute value of the given <code>double</code> value.
abs(double)@0=the absolute value of <code>d</code>, as a <code>double</code>
abs(double)@1=d - the number for which to determine the absolute value
log10(double)=Returns the base 10 logarithm of the given <code>double</code> value.
log10(double)@0=the base 10 logarithm of <code>x</code>, as a <code>double</code>
log10(double)@1=x - the value for which to calculate the base 10 logarithm
roundMagic(double)=Retrieves a <em>magically</em> rounded </code>double</code> value produced from the given <code>double</code> value. This method provides special handling for numbers close to zero and performs rounding only for numbers within a specific range, returning precisely the given value if it does not lie in this range. <p> Special handling includes: <p> <UL> <LI> input in the interval -0.0000000000001..0.0000000000001 returns 0.0 <LI> input outside the interval -1000000000000..1000000000000 returns input unchanged <LI> input is converted to String form <LI> input with a <CODE>String</CODE> form length greater than 16 returns input unchaged <LI> <CODE>String</CODE> form with last four characters of '...000x' where x != '.' is converted to '...0000' <LI> <CODE>String</CODE> form with last four characters of '...9999' is converted to '...999999' <LI> the <CODE>java.lang.Double.doubleValue</CODE> of the <CODE>String</CODE> form is returned </UL>
roundMagic(double)@0=the <em>magically</em> rounded value produced
roundMagic(double)@1=d - the double value for which to retrieve the <em>magically</em> rounded value
cot(double)=Returns the cotangent of the given <code>double</code> value expressed in radians.
cot(double)@0=the cotangent
cot(double)@1=d - the angle, expressed in radians
mod(int,int)=Returns the remainder (modulus) of the first given integer divided by the second. <p>
mod(int,int)@0=<code>i1</code> % <code>i2</code>, as an <code>int</code>
mod(int,int)@1=i1 - the numerator
mod(int,int)@2=i2 - the divisor
pi()=Returns the constant value, pi.
pi()@0=pi as a <code>double</code> value
round(double,int)=Returns the given <code>double</code> value, rounded to the given <code>int</code> places right of the decimal point. If the supplied rounding place value is negative, rounding is performed to the left of the decimal point, using its magnitude (absolute value).
round(double,int)@0=<code>d</code> rounded
round(double,int)@1=d - the value to be rounded
round(double,int)@2=p - the rounding place value
sign(double)=Returns an indicator of the sign of the given <code>double</code> value. If the value is less than zero, -1 is returned. If the value equals zero, 0 is returned. If the value is greater than zero, 1 is returned.
sign(double)@0=the sign of <code>d</code>
sign(double)@1=d - the value
truncate(double,int)=Returns the given <code>double</code> value, truncated to the given <code>int</code> places right of the decimal point. If the given place value is negative, the given <code>double</code> value is truncated to the left of the decimal point, using the magnitude (aboslute value) of the place value.
truncate(double,int)@0=<code>d</code>, truncated
truncate(double,int)@1=d - the value to truncate
truncate(double,int)@2=p - the places left or right of the decimal point at which to truncate
bitand(int,int)=Returns the bit-wise logical <em>and</em> of the given integer values.
bitand(int,int)@0=the bit-wise logical <em>and</em> of <code>i</code> and <code>j</code>
bitand(int,int)@1=i - the first value
bitand(int,int)@2=j - the second value
bitor(int,int)=Returns the bit-wise logical <em>or</em> of the given integer values.
bitor(int,int)@0=he bit-wise logical <em>or</em> of <code>i</code> and <code>j</code>
bitor(int,int)@1=i - the first value
bitor(int,int)@2=j - the second value
bitor(int,int)=Returns the bit-wise logical <em>xor</em> of the given integer values.
bitor(int,int)@0=he bit-wise logical <em>and</em> of <code>i</code> and <code>j</code>
bitor(int,int)@1=i - the first value
bitor(int,int)@2=j - the second value
ascii(java.lang.String)=Returns the Unicode code value of the leftmost character of <code>s</code> as an <code>int</code>. This is the same as the ASCII value if the string contains only ASCII characters.
ascii(java.lang.String)@0=the integer Unicode value of the leftmost character
ascii(java.lang.String)@1=s - the <CODE>String</CODE> to evaluate
character(int)=Returns the character string corresponding to the given ASCII (or Unicode) value. <b>Note:</b> <p> In some SQL CLI implementations, a <CODE>null</CODE> is returned if the range is outside 0..255. In HSQLDB, the corresponding Unicode character is returned unchecked.
character(int)@0=the String representation of the character
character(int)@1=code - the character code for which to return a String representation
concat(java.lang.String,java.lang.String)=Returns a <CODE>String</CODE> object that is the result of an <em>SQL-style</em> concatenation of the given <CODE>String</CODE> objects. <p> <b>Note:</b> by <em>SQL-style</em>, it is meant: <UL> <LI> if both <CODE>String</CODE> objects are <CODE>null</CODE>, return <CODE>null</CODE> <LI> if only one string is <CODE>null</CODE>, return the other <LI> if both <CODE>String</CODE> objects are non-null, return as a <CODE>String</CODE> object the character sequence obtained by listing, in left to right order, the characters of the first string followed by the characters of the second </UL>
concat(java.lang.String,java.lang.String)@0=<code>s1</code> concatentated with <code>s2</code>
concat(java.lang.String,java.lang.String)@1=s1 - the first <CODE>String</CODE>
concat(java.lang.String,java.lang.String)@2=s2 - the second <CODE>String</CODE>
difference(java.lang.String,java.lang.String)=Returns a count of the characters that do not match when comparing the 4 digit numeric SOUNDEX character sequences for the given <code>String</code> objects. If either <code>String</code> object is <code>null</code>, zero is returned.
difference(java.lang.String,java.lang.String)@0=the number of differences between the <code>SOUNDEX</code> of <code>s1</code> and the <code>SOUNDEX</code> of <code>s2</code>
difference(java.lang.String,java.lang.String)@1=s1 - the first <code>String</code>
difference(java.lang.String,java.lang.String)@2=s2 - the second <code>String</code>
## since 1.8.x
dmod(double,double)=Returns the remainder (modulus) of the first given double divided by the second. <p>
dmod(double,double)@0=<code>d1</code> % <code>d2</code>, as a <code>double</code>
dmod(double,double)@1=d1 - the numerator
dmod(double,double)@2=d2 - the divisor
##
hexToRaw(java.lang.String)=Converts a <code>String</code> of hexidecimal digit characters to a raw binary value, represented as a <code>String</code>.<p> The given <code>String</code> object must consist of a sequence of 4 digit hexidecimal character substrings.<p> If its length is not evenly divisible by 4, <code>null</code> is returned. If any any of its 4 character subsequences cannot be parsed as a 4 digit, base 16 value, then a NumberFormatException is thrown. This conversion has the effect of reducing the character count 4:1.
hexToRaw(java.lang.String)@0=an equivalent raw binary value, represented as a <code>String</code>
hexToRaw(java.lang.String)@1=s - a <code>String</code> of hexidecimal digit characters
insert(java.lang.String,int,int,java.lang.String)=Returns a character sequence which is the result of writing the first <code>length</code> number of characters from the second given <code>String</code> over the first string. The start position in the first string where the characters are overwritten is given by <code>start</code>.<p> <b>Note:</b> In order of precedence, boundry conditions are handled as follows:<p> <UL> <LI>if either supplied <code>String</code> is null, then the other is returned; the check starts with the first given <code>String</code>. <LI>if <code>start</code> is less than one, <code>s1</code> is returned <LI>if <code>length</code> is less than or equal to zero, <code>s1</code> is returned <LI>if the length of <code>s2</code> is zero, <code>s1</code> is returned <LI>if <code>start</code> is greater than the length of <code>s1</code>, <code>s1</code> is returned <LI>if <code>length</code> is such that, taken together with <code>start</code>, the indicated interval extends beyond the end of <code>s1</code>, then the insertion is performed precisely as if upon a copy of <code>s1</code> extended in length to just include the indicated interval </UL>
insert(java.lang.String,int,int,java.lang.String)@0=<code>s2</code> inserted into <code>s1</code>, as indicated by <code>start</code> and <code>length</code> and adjusted for boundry conditions
insert(java.lang.String,int,int,java.lang.String)@1=s1 - the <code>String</code> into which to insert <code>s2</code>
insert(java.lang.String,int,int,java.lang.String)@2=start - the position, with origin one, at which to start the insertion
insert(java.lang.String,int,int,java.lang.String)@3=length - the number of characters in <code>s1</code> to replace
insert(java.lang.String,int,int,java.lang.String)@4=s2 - the <code>String</code> to insert into <code>s1</code>
lcase(java.lang.String)=Returns a copy of the given <code>String</code>, with all upper case characters converted to lower case. This uses the default Java String conversion.
lcase(java.lang.String)@0=a lower case version of <code>s</code>
lcase(java.lang.String)@1=s - the <code>String</code> from which to produce a lower case version
left(java.lang.String,int)=Returns the leftmost <code>count</code> characters from the given <code>String</code>. <p> <b>Note:</b> boundry conditions are handled in the following order of precedence: <UL> <LI>if <code>s</code> is <code>null</code>, then <code>null</code> is returned <LI>if <code>count</code> is less than 1, then a zero-length <code>String</code> is returned <LI>if <code>count</code> is greater than the length of <code>s</code>, then a copy of <code>s</code> is returned </UL>
left(java.lang.String,int)@0=the leftmost <code>count</code> characters of <code>s</code>
left(java.lang.String,int)@1=s - the <code>String</code> from which to retrieve the leftmost characters
left(java.lang.String,int)@2=count - the count of leftmost characters to retrieve
length(java.lang.String)=Returns the number of characters in the given <code>String</code>. This includes trailing blanks.
length(java.lang.String)@0=the length of <code>s</code>, including trailing blanks
length(java.lang.String)@1=s - the <code>String</code> for which to determine length
locate(java.lang.String,java.lang.String,java.lang.Integer)=Returns the starting position of the first occurrence of the given <code>search</code> <code>String</code> object within the given <code>String</code> object, <code>s</code>. The search for the first occurrence of <code>search</code> begins with the first character position in <code>s</code>, unless the optional argument, <code>start</code>, is specified (non-null). If <code>start</code> is specified, the search begins with the character position indicated by the value of <code>start</code>, where the first character position in <code>s</code> is indicated by the value 1. If <code>search</code> is not found within <code>s</code>, the value 0 is returned.
locate(java.lang.String,java.lang.String,java.lang.Integer)@0=the one-based starting position of the first occurrence of <code>search</code> within <code>s</code>, or 0 if not found
locate(java.lang.String,java.lang.String,java.lang.Integer)@1=search - the <code>String</code> occurence to find in <code>s</code>
locate(java.lang.String,java.lang.String,java.lang.Integer)@2=s - the <code>String</code> within which to find the first occurence of <code>search</code>
locate(java.lang.String,java.lang.String,java.lang.Integer)@3=start - the optional character position from which to start looking in <code>s</code>
ltrim(java.lang.String)=Returns the characters of the given <code>String</code>, with the leading spaces removed. Characters such as TAB are not removed.
ltrim(java.lang.String)@0=the characters of the given <code>String</code>, with the leading spaces removed
ltrim(java.lang.String)@1=s - the <code>String</code> from which to remove the leading blanks
rawToHex(java.lang.String)=Converts a raw binary value, as represented by the given <code>String</code>, to the equivalent <code>String</code> of hexidecimal digit characters. <p> This conversion has the effect of expanding the character count 1:4.
rawToHex(java.lang.String)@0=an equivalent <code>String</code> of hexidecimal digit characters
rawToHex(java.lang.String)@1=s - the raw binary value, as a <code>String</code>
repeat(java.lang.String,java.lang.Integer)=Returns a <code>String</code> composed of the given <code>String</code>, repeated <code>count</code> times.
repeat(java.lang.String,java.lang.Integer)@0=the given <code>String</code>, repeated <code>count</code> times
repeat(java.lang.String,java.lang.Integer)@1=s - the <code>String</code> to repeat
repeat(java.lang.String,java.lang.Integer)@2=count - the number of repetitions
replace(java.lang.String,java.lang.String,java.lang.String)=Replaces all occurrences of <code>replace</code> in <code>s</code> with the <code>String</code> object: <code>with</code>
replace(java.lang.String,java.lang.String,java.lang.String)@0=<code>s</code>, with all occurences of <code>replace</code> replaced by <code>with</code>
replace(java.lang.String,java.lang.String,java.lang.String)@1=s - the target for replacement
replace(java.lang.String,java.lang.String,java.lang.String)@2=replace - the substring(s), if any, in <code>s</code> to replace
replace(java.lang.String,java.lang.String,java.lang.String)@3=with - the value to substitute for <code>replace</code>
right(java.lang.String,int)=Returns the rightmost <code>count</code> characters of the given <code>String</code>, <code>s</code>. <b>Note:</b> boundry conditions are handled in the following order of precedence: <UL> <LI> if <code>s</code> is <CODE>null</CODE>, <CODE>null</CODE> is returned <LI> if <code>count</code> is less than one, a zero-length <code>String</code> is returned <LI> if <code>count</code> is greater than the length of <code>s</code>, a copy of <code>s</code> is returned </UL>
right(java.lang.String,int)@0=the rightmost <code>count</code> characters of <code>s</code>
right(java.lang.String,int)@1=s - the <code>String</code> from which to retrieve the rightmost <code>count</code> characters
right(java.lang.String,int)@2=count - the number of rightmost characters to retrieve
rtrim(java.lang.String)=Returns the characters of the given <code>String</code>, with trailing spaces removed.
rtrim(java.lang.String)@0=the characters of the given <CODE>String</CODE>, with the trailing spaces removed
rtrim(java.lang.String)@1=s - the <code>String</code> from which to remove the trailing blanks
soundex(java.lang.String)=Returns a four character code representing the sound of the given <code>String</code>. Non-ASCCI characters in the input <code>String</code> are ignored. <p> This method was rewritten for HSQLDB by fredt@users to comply with the description at <a href="http://www.nara.gov/genealogy/coding.html"> http://www.nara.gov/genealogy/coding.html</a>.<p>
soundex(java.lang.String)@0=the 4 character <code>SOUNDEX</code> value for the given <code>String</code>
soundex(java.lang.String)@1=s - the <code>String</code> for which to calculate the 4 character <code>SOUNDEX</code> value
space(int)=Returns a <code>String</code> consisting of <code>count</code> spaces, or <code>null</code> if <code>count</code> is less than zero. <p>
space(int)@0=a <code>String</code> of <code>count</code> spaces
space(int)@1=count - the number of spaces to produce
substring(java.lang.String,int,java.lang.Integer)=Returns the characters from the given <code>String</code>, staring at the indicated one-based <code>start</code> position and extending the (optional) indicated <code>length</code>. If <code>length</code> is not specified (is <code>null</code>), the remainder of <code>s</code> is implied.
substring(java.lang.String,int,java.lang.Integer)@0=the indicted substring of <code>s</code>.
substring(java.lang.String,int,java.lang.Integer)@1=s - the <code>String</code> from which to produce the indicated substring
substring(java.lang.String,int,java.lang.Integer)@2=start - the starting position of the desired substring
substring(java.lang.String,int,java.lang.Integer)@3=length - the length of the desired substring
ucase(java.lang.String)=Returns a copy of the given <code>String</code>, with all lower case characters converted to upper case using the default Java method.
ucase(java.lang.String)@0=an upper case version of <code>s</code>
ucase(java.lang.String)@1=s - the <code>String</code> from which to produce an upper case version
curdate()=Returns the current date as a date value.
curdate()@0=a date value representing the current date
curtime()=Returns the current local time as a time value.
curtime()@0=a time value representing the current local time
dayname(java.sql.Date)=Returns a character string containing the name of the day (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday ) for the day portion of the given <code>java.sql.Date</code>.
dayname(java.sql.Date)@0=the name of the day corresponding to the given <code>java.sql.Date</code>
dayname(java.sql.Date)@1=d - the date value from which to extract the day name
dayofmonth(java.sql.Date)=Returns the day of the month from the given date value, as an integer value in the range of 1-31.
dayofmonth(java.sql.Date)@0=the day of the month from the given date value
dayofmonth(java.sql.Date)@1=d - the date value from which to extract the day of month
dayofweek(java.sql.Date)=Returns the day of the week from the given date value, as an integer value in the range 1-7, where 1 represents Sunday.
dayofweek(java.sql.Date)@0=the day of the week from the given date value
dayofweek(java.sql.Date)@1=d - the date value from which to extract the day of week
dayofyear(java.sql.Date)=Returns the day of the year from the given date value, as an integer value in the range 1-366.
dayofyear(java.sql.Date)@0=the day of the year from the given date value
dayofyear(java.sql.Date)@1=d - the date value from which to extract the day of year
hour(java.sql.Time)=Returns the hour from the given time value, as an integer value in the range of 0-23.
hour(java.sql.Time)@0=the hour of day from the given time value
hour(java.sql.Time)@1=t - the time value from which to extract the hour of day
minute(java.sql.Time)=Returns the minute from the given time value, as integer value in the range of 0-59.
minute(java.sql.Time)@0=the minute value from the given time value
minute(java.sql.Time)@1=t - the time value from which to extract the minute value
month(java.sql.Date)=Returns the month from the given date value, as an integer value in the range of 1-12 or 0-11. <p> If the sql_month database property is set <code>true</code>, then the range is 1-12, else 0-11
month(java.sql.Date)@0=the month value from the given date value
month(java.sql.Date)@1=d - the date value from which to extract the month value
monthname(java.sql.Date)=Returns a character string containing the name of month (January, February, March, April, May, June, July, August, September, October, November, December) for the month portion of the given date value.
monthname(java.sql.Date)@0=a String representing the month name from the given date value
monthname(java.sql.Date)@1=d - the date value from which to extract the month name
now()=Returns the current date and time as a timestamp value.
now()@0=a timestamp value representing the current date and time
quarter(java.sql.Date)=Returns the quarter of the year in the given date value, as an integer value in the range of 1-4.
quarter(java.sql.Date)@0=an integer representing the quater of the year from the given date value
quarter(java.sql.Date)@1=d - the date value from which to extract the quarter of the year
second(java.sql.Time)=Returns the second of the given time value, as an integer value in the range of 0-59.
second(java.sql.Time)@0=an integer representing the second of the hour from the given time value
second(java.sql.Time)@1=d - the date value from which to extract the second of the hour
week(java.sql.Date)=Returns the week of the year from the given date value, as an integer value in the range of 1-53.
week(java.sql.Date)@0=an integer representing the week of the year from the given date value
week(java.sql.Date)@1=d - the date value from which to extract the week of the year
year(java.sql.Date)=Returns the year from the given date value, as an integer value in the range of 1-9999.
year(java.sql.Date)@0=an integer value representing the year from the given date value
year(java.sql.Date)@1=d - the date value from which to extract the year
database(java.sql.Connection)=Returns the name of the database corresponding to this connection.
database(java.sql.Connection)@0=the name of the database for the given connection
database(java.sql.Connection)@1=conn - the connection for which to retrieve the database name
user(java.sql.Connection)=Returns the user's authorization name (the user's name as known to this database).
user(java.sql.Connection)@0=the user's name as known to the database
user(java.sql.Connection)@1=conn - the connection for which to retrieve the user name
identity()=Retrieves the last auto-generated integer indentity value used by this connection. As of 1.7.1 this is a dummy function. The return value is supplied directly by Function.java
identity()@0=the connection's the last generated integer identity value
getAutoCommit(java.sql.Connection)=Retrieves the autocommit status of this connection. <p>
getAutoCommit(java.sql.Connection)@0=a boolean value representing the connection's autocommit status
getAutoCommit(java.sql.Connection)@1=conn - the <code>Connection</code> object for which to retrieve the current autocommit status
getDatabaseProductName()=Retrieves the name of this database product. <p>
getDatabaseProductName()@0=database product name as a <code>String</code> object
getDatabaseProductVersion()=Retrieves the version number of this database product. <p>
getDatabaseProductVersion()@0=database version number as a <code>String</code> object
getDatabaseMajorVersion()=Retrieves the major version number of this database. <p>
getDatabaseMajorVersion()@0=the database's major version as an <code>int</code> value
getDatabaseMinorVersion()=Retrieves the major version number of this database. <p>
getDatabaseMinorVersion()@0=the database's major version as an <code>int</code> value
isReadOnlyConnection(java.sql.Connection)=Retrieves whether this connection is in read-only mode. <p>
isReadOnlyConnection(java.sql.Connection)@0=<code>true</code> if connection is read-only and <code>false</code> otherwise
isReadOnlyConnection(java.sql.Connection)@1=conn - the <code>Connection</code> object for which to retrieve the current read-only status
isReadOnlyDatabase(java.sql.Connection)=Retrieves whether this database is in read-only mode. <p>
isReadOnlyDatabase(java.sql.Connection)@0=<code>true</code> if so; <code>false</code> otherwise
isReadOnlyDatabase(java.sql.Connection)@1=c the <code>Connection</code> object for which to retrieve the current database read-only status
#Since 1.7.2
bitLength(java.lang.String)=Returns the number of bits in the given <code>String</code>. This includes trailing blanks.
bitLength(java.lang.String)@0=the bit length of <code>s</code>, including trailing blanks
bitLength(java.lang.String)@1=The <code>String</code> for which to retrieve the bit length
datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)=Returns the number of date and time boundaries crossed between two specified datetime values.
datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)@0=the number of date and time boundaries crossed between two specified dates, as a Long value
datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)@1=datepart - Specifies the unit in which the interval is to be measured
datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)@2=startdate - The starting datetime value for the interval. This value is subtracted from enddate to return the number of date-parts between the two arguments.
datediff(java.lang.String,java.sql.Timestamp,java.sql.Timestamp)@3=enddate - The ending datetime for the interval. startdate is subtracted from this value to return the number of date-parts between the two arguments
isReadOnlyDatabaseFiles(java.sql.Connection)=Retrieves whether the files of this database are in read-only mode.
isReadOnlyDatabaseFiles(java.sql.Connection)@0=<code>true</code> if so; <code>false</code> otherwise
isReadOnlyDatabaseFiles(java.sql.Connection)@1=c the <code>Connection</code> object for which to retrieve the current database files read-only status
octetLength(java.lang.String)=Returns the number of bytes in the given <code>String</code>. This includes trailing blanks.
octetLength(java.lang.String)@0=the octent length of <code>s</code>, including trailing blanks
octetLength(java.lang.String)@1=The <code>String</code> for which to retrieve the octent length
position(java.lang.String,java.lang.String)=Returns the starting position of the first occurrence of the given <code>search</code> <code>String</code> object within the given <code>String</code> object, <code>s</code>.
position(java.lang.String,java.lang.String)@0=the one-based starting position of the first occurrence of <code>search</code> within <code>s</code>, or 0 if not found
position(java.lang.String,java.lang.String)@1=search - the <code>String</code> occurence to find in <code>s</code>
position(java.lang.String,java.lang.String)@2=s - the <code>String</code> within which to find the first occurence of <code>search</code>
trim(java.lang.String,java.lang.String,boolean,boolean)=Retrieves a character sequence derived from <code>s</code> with the leading, trailing or both leading and trailing occurances of <code>trimstr</code> removed
trim(java.lang.String,java.lang.String,boolean,boolean)@0=The character sequence <code>s</code>, with either the leading or trailing occurrences of <code>trimstr</code> removed
trim(java.lang.String,java.lang.String,boolean,boolean)@1=s - the character sequence from which to remove occurrences of <code>trimstr</code>
trim(java.lang.String,java.lang.String,boolean,boolean)@2=trimstr - the character sequence whose occurances are to be removed from <code>s</code>
trim(java.lang.String,java.lang.String,boolean,boolean)@3=leading - if true, then leading occurences are removed
trim(java.lang.String,java.lang.String,boolean,boolean)@4=trailing - if true, then trailing occurences are removed
