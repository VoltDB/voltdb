sin(double)=Returns the trigonometric sine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
sin(double)@0=the sine of the argument.
sin(double)@1=a - an angle, in radians.
cos(double)=Returns the trigonometric cosine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
cos(double)@0=the cosine of the argument.
cos(double)@1=a - an angle, in radians.
tan(double)=Returns the trigonometric tangent of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
tan(double)@0=the tangent of the argument.
tan(double)@1=a - an angle, in radians.
asin(double)=Returns the arc sine of an angle, in the range of -<i>pi</i>/2 through <i>pi</i>/2. Special cases: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
asin(double)@0=the arc sine of the argument.
asin(double)@1=a - the value whose arc sine is to be returned.
acos(double)=Returns the arc cosine of an angle, in the range of 0.0 through <i>pi</i>. Special case: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
acos(double)@0=the arc cosine of the argument.
acos(double)@1=a - the value whose arc cosine is to be returned.
atan(double)=Returns the arc tangent of an angle, in the range of -<i>pi</i>/2 through <i>pi</i>/2. Special cases: <ul><li>If the argument is NaN, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
atan(double)@0=the arc tangent of the argument.
atan(double)@1=a - the value whose arc tangent is to be returned.
toRadians(double)=Converts an angle measured in degrees to an approximately equivalent angle measured in radians. The conversion from degrees to radians is generally inexact.
toRadians(double)@0=the measurement of the angle <code>angdeg</code> in radians.
toRadians(double)@1=angdeg - an angle, in degrees
toDegrees(double)=Converts an angle measured in radians to an approximately equivalent angle measured in degrees. The conversion from radians to degrees is generally inexact; users should <i>not</i> expect <code>cos(toRadians(90.0))</code> to exactly equal <code>0.0</code>.
toDegrees(double)@0=the measurement of the angle <code>angrad</code> in degrees.
toDegrees(double)@1=angrad - an angle, in radians
exp(double)=Returns Euler's number <i>e</i> raised to the power of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN, the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is negative infinity, then the result is positive zero.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
exp(double)@0=the value <i>e</i><sup><code>a</code></sup>, where <i>e</i> is the base of the natural logarithms.
exp(double)@1=a - the exponent to raise <i>e</i> to.
log(double)=Returns the natural logarithm (base <i>e</i>) of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is negative infinity.</ul> <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
log(double)@0=the value ln&nbsp;<code>a</code>, the natural logarithm of <code>a</code>.
log(double)@1=a - a number greater than <code>0.0</code>.
sqrt(double)=Returns the correctly rounded positive square root of a <code>double</code> value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is the same as the argument.</ul> Otherwise, the result is the <code>double</code> value closest to the true mathematical square root of the argument value.
sqrt(double)@0=the positive square root of <code>a</code>. If the argument is NaN or less than zero, the result is NaN.
sqrt(double)@1=a - a value. <!--@return the value of &radic;&nbsp;<code>a</code>.-->
IEEEremainder(double,double)=Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to <code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>, where <i>n</i> is the mathematical integer closest to the exact mathematical value of the quotient <code>f1/f2</code>, and if two mathematical integers are equally close to <code>f1/f2</code>, then <i>n</i> is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: <ul><li>If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. <li>If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.</ul>
IEEEremainder(double,double)@0=the remainder when <code>f1</code> is divided by <code>f2</code>.
IEEEremainder(double,double)@1=f1 - the dividend.
IEEEremainder(double,double)@2=f2 - the divisor.
ceil(double)=Returns the smallest (closest to negative infinity) <code>double</code> value that is not less than the argument and is equal to a mathematical integer. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument. <li>If the argument value is less than zero but greater than -1.0, then the result is negative zero.</ul> Note that the value of <code>Math.ceil(x)</code> is exactly the value of <code>-Math.floor(-x)</code>.
ceil(double)@0=the smallest (closest to negative infinity) floating-point value that is not less than the argument and is equal to a mathematical integer.
ceil(double)@1=a - a value. <!--@return the value &lceil;&nbsp;<code>a</code>&nbsp;&rceil;.-->
floor(double)=Returns the largest (closest to positive infinity) <code>double</code> value that is not greater than the argument and is equal to a mathematical integer. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.</ul>
floor(double)@0=the largest (closest to positive infinity) floating-point value that is not greater than the argument and is equal to a mathematical integer.
floor(double)@1=a - a value. <!--@return the value &lfloor;&nbsp;<code>a</code>&nbsp;&rfloor;.-->
rint(double)=Returns the <code>double</code> value that is closest in value to the argument and is equal to a mathematical integer. If two <code>double</code> values that are mathematical integers are equally close, the result is the integer value that is even. Special cases: <ul><li>If the argument value is already equal to a mathematical integer, then the result is the same as the argument. <li>If the argument is NaN or an infinity or positive zero or negative zero, then the result is the same as the argument.</ul>
rint(double)@0=the closest floating-point value to <code>a</code> that is equal to a mathematical integer.
rint(double)@1=a - a <code>double</code> value.
atan2(double,double)=Converts rectangular coordinates (<code>x</code>,&nbsp;<code>y</code>) to polar (r,&nbsp;<i>theta</i>). This method computes the phase <i>theta</i> by computing an arc tangent of <code>y/x</code> in the range of -<i>pi</i> to <i>pi</i>. Special cases: <ul><li>If either argument is NaN, then the result is NaN. <li>If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. <li>If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. <li>If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to <i>pi</i>. <li>If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the <code>double</code> value closest to -<i>pi</i>. <li>If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the <code>double</code> value closest to <i>pi</i>/2. <li>If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the <code>double</code> value closest to -<i>pi</i>/2. <li>If both arguments are positive infinity, then the result is the <code>double</code> value closest to <i>pi</i>/4. <li>If the first argument is positive infinity and the second argument is negative infinity, then the result is the <code>double</code> value closest to 3*<i>pi</i>/4. <li>If the first argument is negative infinity and the second argument is positive infinity, then the result is the <code>double</code> value closest to -<i>pi</i>/4. <li>If both arguments are negative infinity, then the result is the <code>double</code> value closest to -3*<i>pi</i>/4.</ul> <p> A result must be within 2 ulps of the correctly rounded result. Results must be semi-monotonic.
atan2(double,double)@0=the <i>theta</i> component of the point (<i>r</i>,&nbsp;<i>theta</i>) in polar coordinates that corresponds to the point (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates.
atan2(double,double)@1=y - the ordinate coordinate
atan2(double,double)@2=x - the abscissa coordinate
pow(double,double)=Returns of value of the first argument raised to the power of the second argument. Special cases: <ul><li>If the second argument is positive or negative zero, then the result is 1.0. <li>If the second argument is 1.0, then the result is the same as the first argument. <li>If the second argument is NaN, then the result is NaN. <li>If the first argument is NaN and the second argument is nonzero, then the result is NaN. <li>If the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or the absolute value of the first argument is less than 1 and the second argument is negative infinity, then the result is positive infinity. <li>If the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or the absolute value of the first argument is less than 1 and the second argument is positive infinity, then the result is positive zero. <li>If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. <li>If the first argument is positive zero and the second argument is greater than zero, or the first argument is positive infinity and the second argument is less than zero, then the result is positive zero. <li>If the first argument is positive zero and the second argument is less than zero, or the first argument is positive infinity and the second argument is greater than zero, then the result is positive infinity. <li>If the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, then the result is positive zero. <li>If the first argument is negative zero and the second argument is a positive finite odd integer, or the first argument is negative infinity and the second argument is a negative finite odd integer, then the result is negative zero. <li>If the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, then the result is positive infinity. <li>If the first argument is negative zero and the second argument is a negative finite odd integer, or the first argument is negative infinity and the second argument is a positive finite odd integer, then the result is negative infinity. <li>If the first argument is less than zero and the second argument is a finite even integer, then the result is equal to the result of raising the absolute value of the first argument to the power of the second argument. <li>If the first argument is less than zero and the second argument is a finite odd integer, then the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument. <li>If the first argument is finite and less than zero and the second argument is finite and not an integer, then the result is NaN. <li>If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a double value.</ul> <p>(In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is a fixed point of the method {@link #ceil <tt>ceil</tt>} or, equivalently, a fixed point of the method {@link #floor <tt>floor</tt>}. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.) <p> A result must be within 1 ulp of the correctly rounded result. Results must be semi-monotonic.
pow(double,double)@0=the value <code>a<sup>b</sup></code>.
pow(double,double)@1=a - the base.
pow(double,double)@2=b - the exponent.
round(float)=Returns the closest <code>int</code> to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type <code>int</code>. In other words, the result is equal to the value of the expression: <p><pre>(int)Math.floor(a + 0.5f)</pre> <p> Special cases: <ul><li>If the argument is NaN, the result is 0. <li>If the argument is negative infinity or any value less than or equal to the value of <code>Integer.MIN_VALUE</code>, the result is equal to the value of <code>Integer.MIN_VALUE</code>. <li>If the argument is positive infinity or any value greater than or equal to the value of <code>Integer.MAX_VALUE</code>, the result is equal to the value of <code>Integer.MAX_VALUE</code>.</ul>
round(float)@0=the value of the argument rounded to the nearest <code>int</code> value.
round(float)@1=a - a floating-point value to be rounded to an integer.
round(double)=Returns the closest <code>long</code> to the argument. The result is rounded to an integer by adding 1/2, taking the floor of the result, and casting the result to type <code>long</code>. In other words, the result is equal to the value of the expression: <p><pre>(long)Math.floor(a + 0.5d)</pre> <p> Special cases: <ul><li>If the argument is NaN, the result is 0. <li>If the argument is negative infinity or any value less than or equal to the value of <code>Long.MIN_VALUE</code>, the result is equal to the value of <code>Long.MIN_VALUE</code>. <li>If the argument is positive infinity or any value greater than or equal to the value of <code>Long.MAX_VALUE</code>, the result is equal to the value of <code>Long.MAX_VALUE</code>.</ul>
round(double)@0=the value of the argument rounded to the nearest <code>long</code> value.
round(double)@1=a - a floating-point value to be rounded to a <code>long</code>.
random()=Returns a <code>double</code> value with a positive sign, greater than or equal to <code>0.0</code> and less than <code>1.0</code>. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. <p> When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression <blockquote><pre>new java.util.Random</pre></blockquote> This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. <p> This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.
random()@0=a pseudorandom <code>double</code> greater than or equal to <code>0.0</code> and less than <code>1.0</code>.
abs(int)=Returns the absolute value of an <code>int</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. <p> Note that if the argument is equal to the value of <code>Integer.MIN_VALUE</code>, the most negative representable <code>int</code> value, the result is that same value, which is negative.
abs(int)@0=the absolute value of the argument.
abs(int)@1=a - the argument whose absolute value is to be determined
abs(long)=Returns the absolute value of a <code>long</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. <p> Note that if the argument is equal to the value of <code>Long.MIN_VALUE</code>, the most negative representable <code>long</code> value, the result is that same value, which is negative.
abs(long)@0=the absolute value of the argument.
abs(long)@1=a - the argument whose absolute value is to be determined
abs(float)=Returns the absolute value of a <code>float</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: <ul><li>If the argument is positive zero or negative zero, the result is positive zero. <li>If the argument is infinite, the result is positive infinity. <li>If the argument is NaN, the result is NaN.</ul> In other words, the result is the same as the value of the expression: <p><pre>Float.intBitsToFloat(0x7fffffff & Float.floatToIntBits(a))</pre>
abs(float)@0=the absolute value of the argument.
abs(float)@1=a - the argument whose absolute value is to be determined
abs(double)=Returns the absolute value of a <code>double</code> value. If the argument is not negative, the argument is returned. If the argument is negative, the negation of the argument is returned. Special cases: <ul><li>If the argument is positive zero or negative zero, the result is positive zero. <li>If the argument is infinite, the result is positive infinity. <li>If the argument is NaN, the result is NaN.</ul> In other words, the result is the same as the value of the expression: <p><code>Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)</code>
abs(double)@0=the absolute value of the argument.
abs(double)@1=a - the argument whose absolute value is to be determined
max(int,int)=Returns the greater of two <code>int</code> values. That is, the result is the argument closer to the value of <code>Integer.MAX_VALUE</code>. If the arguments have the same value, the result is that same value.
max(int,int)@0=the larger of <code>a</code> and <code>b</code>.
max(int,int)@1=a - an argument.
max(int,int)@2=b - another argument.
max(long,long)=Returns the greater of two <code>long</code> values. That is, the result is the argument closer to the value of <code>Long.MAX_VALUE</code>. If the arguments have the same value, the result is that same value.
max(long,long)@0=the larger of <code>a</code> and <code>b</code>.
max(long,long)@1=a - an argument.
max(long,long)@2=b - another argument.
max(float,float)=Returns the greater of two <code>float</code> values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.
max(float,float)@0=the larger of <code>a</code> and <code>b</code>.
max(float,float)@1=a - an argument.
max(float,float)@2=b - another argument.
max(double,double)=Returns the greater of two <code>double</code> values. That is, the result is the argument closer to positive infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other negative zero, the result is positive zero.
max(double,double)@0=the larger of <code>a</code> and <code>b</code>.
max(double,double)@1=a - an argument.
max(double,double)@2=b - another argument.
min(int,int)=Returns the smaller of two <code>int</code> values. That is, the result the argument closer to the value of <code>Integer.MIN_VALUE</code>. If the arguments have the same value, the result is that same value.
min(int,int)@0=the smaller of <code>a</code> and <code>b</code>.
min(int,int)@1=a - an argument.
min(int,int)@2=b - another argument.
min(long,long)=Returns the smaller of two <code>long</code> values. That is, the result is the argument closer to the value of <code>Long.MIN_VALUE</code>. If the arguments have the same value, the result is that same value.
min(long,long)@0=the smaller of <code>a</code> and <code>b</code>.
min(long,long)@1=a - an argument.
min(long,long)@2=b - another argument.
min(float,float)=Returns the smaller of two <code>float</code> values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.
min(float,float)@0=the smaller of <code>a</code> and <code>b.</code>
min(float,float)@1=a - an argument.
min(float,float)@2=b - another argument.
min(double,double)=Returns the smaller of two <code>double</code> values. That is, the result is the value closer to negative infinity. If the arguments have the same value, the result is that same value. If either value is NaN, then the result is NaN. Unlike the the numerical comparison operators, this method considers negative zero to be strictly smaller than positive zero. If one argument is positive zero and the other is negative zero, the result is negative zero.
min(double,double)@0=the smaller of <code>a</code> and <code>b</code>.
min(double,double)@1=a - an argument.
min(double,double)@2=b - another argument.
