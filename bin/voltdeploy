#!/usr/bin/env python
# This file is part of VoltDB.

# Copyright (C) 2008-2016 VoltDB Inc.
#
# This file contains original code and/or modifications of original code.
# Any modifications made by VoltDB Inc. are licensed under the following
# terms and conditions:
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# This script assumes a relative location in a root subdirectory of a voltdb
# distribution. The logic is intentionally minimal since almost all of the
# heavy lifting happens in runner.main(). The script name determines the verbs
# that are loaded from <name>.d subdirectories. It loads the version number
# from version.txt in the script's parent directory. It can be copied to other
# names, and also to other locations if the path-building is adjusted. The
# description should also be changed if re-used for another base command.

import os
import sys
from optparse import OptionParser
sys.path.append(os.path.abspath(os.path.dirname(__file__) + '/' + '../lib/python/vdm/server'))
import venv_starter
import urllib2

array_packages = []




parser = OptionParser(usage="usage: %prog [options] filepath",
                          version="%prog 1.0")
parser.add_option("-p", "--path",
              action="store", type="string", dest="filepath")
parser.add_option("-s", "--server",
              action="store", type="string", dest="server")

parser.add_option("-v", "--virtual",
              action="store", type="string", dest="virtual")

(options, args) = parser.parse_args()


arr = [{
    "filepath": options.filepath,
    "server": options.server,
}]

cmd_dir, cmd_name = os.path.split(os.path.realpath(sys.argv[0]))
base_dir = os.path.dirname(cmd_dir)

with open(os.path.realpath(os.path.join(base_dir, 'lib/python/vdm', 'requirements.txt')), "r") as ins:
        for line in ins:
            if line[0] != '#' and line[0] != '\n':
                package_name = line
                array_packages.append(package_name)

if options.virtual is not None:
    if str(options.virtual).lower() == 'false':
        venv_starter.main(arr)
    else:
        venv_starter.start_virtual_environment(arr, array_packages)
else:
    venv_starter.start_virtual_environment(arr, array_packages)
