# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_s2', [dirname(__file__)])
        except ImportError:
            import _s2
            return _s2
        if fp is not None:
            try:
                _mod = imp.load_module('_s2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _s2 = swig_import_helper()
    del swig_import_helper
else:
    import _s2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _s2.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _s2.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _s2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _s2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _s2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _s2.SwigPyIterator_equal(self, x)

    def copy(self):
        return _s2.SwigPyIterator_copy(self)

    def next(self):
        return _s2.SwigPyIterator_next(self)

    def __next__(self):
        return _s2.SwigPyIterator___next__(self)

    def previous(self):
        return _s2.SwigPyIterator_previous(self)

    def advance(self, n):
        return _s2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _s2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _s2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _s2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _s2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _s2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _s2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _s2.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def FromS2CellId(cell_id):
    return _s2.FromS2CellId(cell_id)
FromS2CellId = _s2.FromS2CellId
class R1Interval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, R1Interval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, R1Interval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _s2.new_R1Interval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["Empty"] = lambda x: _s2.R1Interval_Empty
    if _newclass:
        Empty = staticmethod(_s2.R1Interval_Empty)
    __swig_getmethods__["FromPoint"] = lambda x: _s2.R1Interval_FromPoint
    if _newclass:
        FromPoint = staticmethod(_s2.R1Interval_FromPoint)
    __swig_getmethods__["FromPointPair"] = lambda x: _s2.R1Interval_FromPointPair
    if _newclass:
        FromPointPair = staticmethod(_s2.R1Interval_FromPointPair)

    def lo(self):
        return _s2.R1Interval_lo(self)

    def hi(self):
        return _s2.R1Interval_hi(self)

    def bound(self, i):
        return _s2.R1Interval_bound(self, i)

    def bounds(self):
        return _s2.R1Interval_bounds(self)

    def set_lo(self, p):
        return _s2.R1Interval_set_lo(self, p)

    def set_hi(self, p):
        return _s2.R1Interval_set_hi(self, p)

    def is_empty(self):
        return _s2.R1Interval_is_empty(self)

    def GetCenter(self):
        return _s2.R1Interval_GetCenter(self)

    def GetLength(self):
        return _s2.R1Interval_GetLength(self)

    def Contains(self, *args):
        return _s2.R1Interval_Contains(self, *args)

    def InteriorContains(self, *args):
        return _s2.R1Interval_InteriorContains(self, *args)

    def Intersects(self, y):
        return _s2.R1Interval_Intersects(self, y)

    def InteriorIntersects(self, y):
        return _s2.R1Interval_InteriorIntersects(self, y)

    def GetDirectedHausdorffDistance(self, y):
        return _s2.R1Interval_GetDirectedHausdorffDistance(self, y)

    def AddPoint(self, p):
        return _s2.R1Interval_AddPoint(self, p)

    def Expanded(self, radius):
        return _s2.R1Interval_Expanded(self, radius)

    def Union(self, y):
        return _s2.R1Interval_Union(self, y)

    def Intersection(self, y):
        return _s2.R1Interval_Intersection(self, y)

    def __eq__(self, y):
        return _s2.R1Interval___eq__(self, y)

    def ApproxEquals(self, y, max_error=1e-15):
        return _s2.R1Interval_ApproxEquals(self, y, max_error)
    __swig_destroy__ = _s2.delete_R1Interval
    __del__ = lambda self: None
R1Interval_swigregister = _s2.R1Interval_swigregister
R1Interval_swigregister(R1Interval)

def R1Interval_Empty():
    return _s2.R1Interval_Empty()
R1Interval_Empty = _s2.R1Interval_Empty

def R1Interval_FromPoint(p):
    return _s2.R1Interval_FromPoint(p)
R1Interval_FromPoint = _s2.R1Interval_FromPoint

def R1Interval_FromPointPair(p1, p2):
    return _s2.R1Interval_FromPointPair(p1, p2)
R1Interval_FromPointPair = _s2.R1Interval_FromPointPair

class S1Angle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1Angle, name)
    __repr__ = _swig_repr
    __swig_getmethods__["Radians"] = lambda x: _s2.S1Angle_Radians
    if _newclass:
        Radians = staticmethod(_s2.S1Angle_Radians)
    __swig_getmethods__["Degrees"] = lambda x: _s2.S1Angle_Degrees
    if _newclass:
        Degrees = staticmethod(_s2.S1Angle_Degrees)
    __swig_getmethods__["E5"] = lambda x: _s2.S1Angle_E5
    if _newclass:
        E5 = staticmethod(_s2.S1Angle_E5)
    __swig_getmethods__["E6"] = lambda x: _s2.S1Angle_E6
    if _newclass:
        E6 = staticmethod(_s2.S1Angle_E6)
    __swig_getmethods__["E7"] = lambda x: _s2.S1Angle_E7
    if _newclass:
        E7 = staticmethod(_s2.S1Angle_E7)
    __swig_getmethods__["UnsignedE6"] = lambda x: _s2.S1Angle_UnsignedE6
    if _newclass:
        UnsignedE6 = staticmethod(_s2.S1Angle_UnsignedE6)
    __swig_getmethods__["UnsignedE7"] = lambda x: _s2.S1Angle_UnsignedE7
    if _newclass:
        UnsignedE7 = staticmethod(_s2.S1Angle_UnsignedE7)

    def __init__(self, *args):
        this = _s2.new_S1Angle(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def radians(self):
        return _s2.S1Angle_radians(self)

    def degrees(self):
        return _s2.S1Angle_degrees(self)

    def e5(self):
        return _s2.S1Angle_e5(self)

    def e6(self):
        return _s2.S1Angle_e6(self)

    def e7(self):
        return _s2.S1Angle_e7(self)

    def abs(self):
        return _s2.S1Angle_abs(self)

    def __iadd__(self, a):
        return _s2.S1Angle___iadd__(self, a)

    def __isub__(self, a):
        return _s2.S1Angle___isub__(self, a)

    def __imul__(self, m):
        return _s2.S1Angle___imul__(self, m)

    def __idiv__(self, m):
        return _s2.S1Angle___idiv__(self, m)

    def Normalized(self):
        return _s2.S1Angle_Normalized(self)

    def Normalize(self):
        return _s2.S1Angle_Normalize(self)

    def __str__(self):
        return _s2.S1Angle___str__(self)
    __swig_destroy__ = _s2.delete_S1Angle
    __del__ = lambda self: None
S1Angle_swigregister = _s2.S1Angle_swigregister
S1Angle_swigregister(S1Angle)

def S1Angle_Radians(radians):
    return _s2.S1Angle_Radians(radians)
S1Angle_Radians = _s2.S1Angle_Radians

def S1Angle_Degrees(degrees):
    return _s2.S1Angle_Degrees(degrees)
S1Angle_Degrees = _s2.S1Angle_Degrees

def S1Angle_E5(e5):
    return _s2.S1Angle_E5(e5)
S1Angle_E5 = _s2.S1Angle_E5

def S1Angle_E6(e6):
    return _s2.S1Angle_E6(e6)
S1Angle_E6 = _s2.S1Angle_E6

def S1Angle_E7(e7):
    return _s2.S1Angle_E7(e7)
S1Angle_E7 = _s2.S1Angle_E7

def S1Angle_UnsignedE6(e6):
    return _s2.S1Angle_UnsignedE6(e6)
S1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6

def S1Angle_UnsignedE7(e7):
    return _s2.S1Angle_UnsignedE7(e7)
S1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7

class S1Interval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S1Interval, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _s2.new_S1Interval(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["Empty"] = lambda x: _s2.S1Interval_Empty
    if _newclass:
        Empty = staticmethod(_s2.S1Interval_Empty)
    __swig_getmethods__["Full"] = lambda x: _s2.S1Interval_Full
    if _newclass:
        Full = staticmethod(_s2.S1Interval_Full)
    __swig_getmethods__["FromPoint"] = lambda x: _s2.S1Interval_FromPoint
    if _newclass:
        FromPoint = staticmethod(_s2.S1Interval_FromPoint)
    __swig_getmethods__["FromPointPair"] = lambda x: _s2.S1Interval_FromPointPair
    if _newclass:
        FromPointPair = staticmethod(_s2.S1Interval_FromPointPair)

    def lo(self):
        return _s2.S1Interval_lo(self)

    def hi(self):
        return _s2.S1Interval_hi(self)

    def bound(self, i):
        return _s2.S1Interval_bound(self, i)

    def bounds(self):
        return _s2.S1Interval_bounds(self)

    def set_lo(self, p):
        return _s2.S1Interval_set_lo(self, p)

    def set_hi(self, p):
        return _s2.S1Interval_set_hi(self, p)

    def is_valid(self):
        return _s2.S1Interval_is_valid(self)

    def is_full(self):
        return _s2.S1Interval_is_full(self)

    def is_empty(self):
        return _s2.S1Interval_is_empty(self)

    def is_inverted(self):
        return _s2.S1Interval_is_inverted(self)

    def GetCenter(self):
        return _s2.S1Interval_GetCenter(self)

    def GetLength(self):
        return _s2.S1Interval_GetLength(self)

    def Complement(self):
        return _s2.S1Interval_Complement(self)

    def GetComplementCenter(self):
        return _s2.S1Interval_GetComplementCenter(self)

    def Contains(self, *args):
        return _s2.S1Interval_Contains(self, *args)

    def InteriorContains(self, *args):
        return _s2.S1Interval_InteriorContains(self, *args)

    def Intersects(self, y):
        return _s2.S1Interval_Intersects(self, y)

    def InteriorIntersects(self, y):
        return _s2.S1Interval_InteriorIntersects(self, y)

    def GetDirectedHausdorffDistance(self, y):
        return _s2.S1Interval_GetDirectedHausdorffDistance(self, y)

    def AddPoint(self, p):
        return _s2.S1Interval_AddPoint(self, p)

    def Expanded(self, radius):
        return _s2.S1Interval_Expanded(self, radius)

    def Union(self, y):
        return _s2.S1Interval_Union(self, y)

    def Intersection(self, y):
        return _s2.S1Interval_Intersection(self, y)

    def __eq__(self, y):
        return _s2.S1Interval___eq__(self, y)

    def ApproxEquals(self, y, max_error=1e-15):
        return _s2.S1Interval_ApproxEquals(self, y, max_error)

    def __str__(self):
        return _s2.S1Interval___str__(self)
    __swig_destroy__ = _s2.delete_S1Interval
    __del__ = lambda self: None
S1Interval_swigregister = _s2.S1Interval_swigregister
S1Interval_swigregister(S1Interval)

def S1Interval_Empty():
    return _s2.S1Interval_Empty()
S1Interval_Empty = _s2.S1Interval_Empty

def S1Interval_Full():
    return _s2.S1Interval_Full()
S1Interval_Full = _s2.S1Interval_Full

def S1Interval_FromPoint(p):
    return _s2.S1Interval_FromPoint(p)
S1Interval_FromPoint = _s2.S1Interval_FromPoint

def S1Interval_FromPointPair(p1, p2):
    return _s2.S1Interval_FromPointPair(p1, p2)
S1Interval_FromPointPair = _s2.S1Interval_FromPointPair

class S2CellId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2CellId, name)
    __repr__ = _swig_repr
    kFaceBits = _s2.S2CellId_kFaceBits
    kNumFaces = _s2.S2CellId_kNumFaces
    kMaxLevel = _s2.S2CellId_kMaxLevel
    kPosBits = _s2.S2CellId_kPosBits
    kMaxSize = _s2.S2CellId_kMaxSize

    def __init__(self, *args):
        this = _s2.new_S2CellId(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["Sentinel"] = lambda x: _s2.S2CellId_Sentinel
    if _newclass:
        Sentinel = staticmethod(_s2.S2CellId_Sentinel)
    __swig_getmethods__["FromFacePosLevel"] = lambda x: _s2.S2CellId_FromFacePosLevel
    if _newclass:
        FromFacePosLevel = staticmethod(_s2.S2CellId_FromFacePosLevel)
    __swig_getmethods__["FromPoint"] = lambda x: _s2.S2CellId_FromPoint
    if _newclass:
        FromPoint = staticmethod(_s2.S2CellId_FromPoint)
    __swig_getmethods__["FromLatLng"] = lambda x: _s2.S2CellId_FromLatLng
    if _newclass:
        FromLatLng = staticmethod(_s2.S2CellId_FromLatLng)

    def ToPoint(self):
        return _s2.S2CellId_ToPoint(self)

    def ToPointRaw(self):
        return _s2.S2CellId_ToPointRaw(self)

    def GetCenterST(self):
        return _s2.S2CellId_GetCenterST(self)

    def GetCenterUV(self):
        return _s2.S2CellId_GetCenterUV(self)

    def ToLatLng(self):
        return _s2.S2CellId_ToLatLng(self)

    def id(self):
        return _s2.S2CellId_id(self)

    def is_valid(self):
        return _s2.S2CellId_is_valid(self)

    def face(self):
        return _s2.S2CellId_face(self)

    def pos(self):
        return _s2.S2CellId_pos(self)

    def level(self):
        return _s2.S2CellId_level(self)
    __swig_getmethods__["GetSizeIJ"] = lambda x: _s2.S2CellId_GetSizeIJ
    if _newclass:
        GetSizeIJ = staticmethod(_s2.S2CellId_GetSizeIJ)
    __swig_getmethods__["GetSizeST"] = lambda x: _s2.S2CellId_GetSizeST
    if _newclass:
        GetSizeST = staticmethod(_s2.S2CellId_GetSizeST)

    def is_leaf(self):
        return _s2.S2CellId_is_leaf(self)

    def is_face(self):
        return _s2.S2CellId_is_face(self)

    def child_position(self, level):
        return _s2.S2CellId_child_position(self, level)

    def range_min(self):
        return _s2.S2CellId_range_min(self)

    def range_max(self):
        return _s2.S2CellId_range_max(self)

    def contains(self, other):
        return _s2.S2CellId_contains(self, other)

    def intersects(self, other):
        return _s2.S2CellId_intersects(self, other)

    def parent(self, *args):
        return _s2.S2CellId_parent(self, *args)

    def child(self, position):
        return _s2.S2CellId_child(self, position)

    def child_begin(self, *args):
        return _s2.S2CellId_child_begin(self, *args)

    def child_end(self, *args):
        return _s2.S2CellId_child_end(self, *args)

    def next(self):
        return _s2.S2CellId_next(self)

    def prev(self):
        return _s2.S2CellId_prev(self)

    def advance(self, steps):
        return _s2.S2CellId_advance(self, steps)

    def next_wrap(self):
        return _s2.S2CellId_next_wrap(self)

    def prev_wrap(self):
        return _s2.S2CellId_prev_wrap(self)

    def advance_wrap(self, steps):
        return _s2.S2CellId_advance_wrap(self, steps)
    __swig_getmethods__["Begin"] = lambda x: _s2.S2CellId_Begin
    if _newclass:
        Begin = staticmethod(_s2.S2CellId_Begin)
    __swig_getmethods__["End"] = lambda x: _s2.S2CellId_End
    if _newclass:
        End = staticmethod(_s2.S2CellId_End)

    def ToToken(self):
        return _s2.S2CellId_ToToken(self)
    __swig_getmethods__["FromToken"] = lambda x: _s2.S2CellId_FromToken
    if _newclass:
        FromToken = staticmethod(_s2.S2CellId_FromToken)

    def ToString(self):
        return _s2.S2CellId_ToString(self)

    def GetEdgeNeighbors(self, neighbors):
        return _s2.S2CellId_GetEdgeNeighbors(self, neighbors)

    def AppendVertexNeighbors(self, level):
        return _s2.S2CellId_AppendVertexNeighbors(self, level)

    def AppendAllNeighbors(self, nbr_level):
        return _s2.S2CellId_AppendAllNeighbors(self, nbr_level)
    __swig_getmethods__["FromFaceIJ"] = lambda x: _s2.S2CellId_FromFaceIJ
    if _newclass:
        FromFaceIJ = staticmethod(_s2.S2CellId_FromFaceIJ)

    def ToFaceIJOrientation(self, pi, pj, orientation):
        return _s2.S2CellId_ToFaceIJOrientation(self, pi, pj, orientation)

    def lsb(self):
        return _s2.S2CellId_lsb(self)
    __swig_getmethods__["lsb_for_level"] = lambda x: _s2.S2CellId_lsb_for_level
    if _newclass:
        lsb_for_level = staticmethod(_s2.S2CellId_lsb_for_level)

    def __str__(self):
        return _s2.S2CellId___str__(self)

    def __eq__(self, other):
        return _s2.S2CellId___eq__(self, other)

    def __ne__(self, other):
        return _s2.S2CellId___ne__(self, other)

    def __lt__(self, other):
        return _s2.S2CellId___lt__(self, other)

    def __gt__(self, other):
        return _s2.S2CellId___gt__(self, other)
    __swig_destroy__ = _s2.delete_S2CellId
    __del__ = lambda self: None
S2CellId_swigregister = _s2.S2CellId_swigregister
S2CellId_swigregister(S2CellId)

def S2CellId_Sentinel():
    return _s2.S2CellId_Sentinel()
S2CellId_Sentinel = _s2.S2CellId_Sentinel

def S2CellId_FromFacePosLevel(face, pos, level):
    return _s2.S2CellId_FromFacePosLevel(face, pos, level)
S2CellId_FromFacePosLevel = _s2.S2CellId_FromFacePosLevel

def S2CellId_FromPoint(p):
    return _s2.S2CellId_FromPoint(p)
S2CellId_FromPoint = _s2.S2CellId_FromPoint

def S2CellId_FromLatLng(ll):
    return _s2.S2CellId_FromLatLng(ll)
S2CellId_FromLatLng = _s2.S2CellId_FromLatLng

def S2CellId_GetSizeIJ(*args):
    return _s2.S2CellId_GetSizeIJ(*args)
S2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ

def S2CellId_GetSizeST(*args):
    return _s2.S2CellId_GetSizeST(*args)
S2CellId_GetSizeST = _s2.S2CellId_GetSizeST

def S2CellId_Begin(level):
    return _s2.S2CellId_Begin(level)
S2CellId_Begin = _s2.S2CellId_Begin

def S2CellId_End(level):
    return _s2.S2CellId_End(level)
S2CellId_End = _s2.S2CellId_End

def S2CellId_FromToken(token):
    return _s2.S2CellId_FromToken(token)
S2CellId_FromToken = _s2.S2CellId_FromToken

def S2CellId_FromFaceIJ(face, i, j):
    return _s2.S2CellId_FromFaceIJ(face, i, j)
S2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ

def S2CellId_lsb_for_level(level):
    return _s2.S2CellId_lsb_for_level(level)
S2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level

class S2Region(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2Region, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _s2.delete_S2Region
    __del__ = lambda self: None

    def Clone(self):
        return _s2.S2Region_Clone(self)

    def GetCapBound(self):
        return _s2.S2Region_GetCapBound(self)

    def GetRectBound(self):
        return _s2.S2Region_GetRectBound(self)

    def Contains(self, cell):
        return _s2.S2Region_Contains(self, cell)

    def MayIntersect(self, cell):
        return _s2.S2Region_MayIntersect(self, cell)

    def VirtualContainsPoint(self, p):
        return _s2.S2Region_VirtualContainsPoint(self, p)

    def Encode(self, encoder):
        return _s2.S2Region_Encode(self, encoder)

    def Decode(self, decoder):
        return _s2.S2Region_Decode(self, decoder)

    def DecodeWithinScope(self, decoder):
        return _s2.S2Region_DecodeWithinScope(self, decoder)
S2Region_swigregister = _s2.S2Region_swigregister
S2Region_swigregister(S2Region)

class S2Cap(S2Region):
    __swig_setmethods__ = {}
    for _s in [S2Region]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cap, name, value)
    __swig_getmethods__ = {}
    for _s in [S2Region]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, S2Cap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _s2.new_S2Cap()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["FromAxisHeight"] = lambda x: _s2.S2Cap_FromAxisHeight
    if _newclass:
        FromAxisHeight = staticmethod(_s2.S2Cap_FromAxisHeight)
    __swig_getmethods__["FromAxisAngle"] = lambda x: _s2.S2Cap_FromAxisAngle
    if _newclass:
        FromAxisAngle = staticmethod(_s2.S2Cap_FromAxisAngle)
    __swig_getmethods__["FromAxisArea"] = lambda x: _s2.S2Cap_FromAxisArea
    if _newclass:
        FromAxisArea = staticmethod(_s2.S2Cap_FromAxisArea)
    __swig_getmethods__["Empty"] = lambda x: _s2.S2Cap_Empty
    if _newclass:
        Empty = staticmethod(_s2.S2Cap_Empty)
    __swig_getmethods__["Full"] = lambda x: _s2.S2Cap_Full
    if _newclass:
        Full = staticmethod(_s2.S2Cap_Full)
    __swig_destroy__ = _s2.delete_S2Cap
    __del__ = lambda self: None

    def axis(self):
        return _s2.S2Cap_axis(self)

    def height(self):
        return _s2.S2Cap_height(self)

    def area(self):
        return _s2.S2Cap_area(self)

    def angle(self):
        return _s2.S2Cap_angle(self)

    def is_valid(self):
        return _s2.S2Cap_is_valid(self)

    def is_empty(self):
        return _s2.S2Cap_is_empty(self)

    def is_full(self):
        return _s2.S2Cap_is_full(self)

    def Complement(self):
        return _s2.S2Cap_Complement(self)

    def Intersects(self, other):
        return _s2.S2Cap_Intersects(self, other)

    def InteriorIntersects(self, other):
        return _s2.S2Cap_InteriorIntersects(self, other)

    def InteriorContains(self, p):
        return _s2.S2Cap_InteriorContains(self, p)

    def AddPoint(self, p):
        return _s2.S2Cap_AddPoint(self, p)

    def AddCap(self, other):
        return _s2.S2Cap_AddCap(self, other)

    def Expanded(self, distance):
        return _s2.S2Cap_Expanded(self, distance)

    def Clone(self):
        return _s2.S2Cap_Clone(self)

    def GetCapBound(self):
        return _s2.S2Cap_GetCapBound(self)

    def GetRectBound(self):
        return _s2.S2Cap_GetRectBound(self)

    def MayIntersect(self, cell):
        return _s2.S2Cap_MayIntersect(self, cell)

    def VirtualContainsPoint(self, p):
        return _s2.S2Cap_VirtualContainsPoint(self, p)

    def Contains(self, *args):
        return _s2.S2Cap_Contains(self, *args)

    def Encode(self, encoder):
        return _s2.S2Cap_Encode(self, encoder)

    def Decode(self, decoder):
        return _s2.S2Cap_Decode(self, decoder)

    def __eq__(self, other):
        return _s2.S2Cap___eq__(self, other)

    def ApproxEquals(self, other, max_error=1e-14):
        return _s2.S2Cap_ApproxEquals(self, other, max_error)

    def __str__(self):
        return _s2.S2Cap___str__(self)
S2Cap_swigregister = _s2.S2Cap_swigregister
S2Cap_swigregister(S2Cap)

def S2Cap_FromAxisHeight(axis, height):
    return _s2.S2Cap_FromAxisHeight(axis, height)
S2Cap_FromAxisHeight = _s2.S2Cap_FromAxisHeight

def S2Cap_FromAxisAngle(axis, angle):
    return _s2.S2Cap_FromAxisAngle(axis, angle)
S2Cap_FromAxisAngle = _s2.S2Cap_FromAxisAngle

def S2Cap_FromAxisArea(axis, area):
    return _s2.S2Cap_FromAxisArea(axis, area)
S2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea

def S2Cap_Empty():
    return _s2.S2Cap_Empty()
S2Cap_Empty = _s2.S2Cap_Empty

def S2Cap_Full():
    return _s2.S2Cap_Full()
S2Cap_Full = _s2.S2Cap_Full

class S2LatLng(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLng, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _s2.new_S2LatLng(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["Invalid"] = lambda x: _s2.S2LatLng_Invalid
    if _newclass:
        Invalid = staticmethod(_s2.S2LatLng_Invalid)
    __swig_getmethods__["FromRadians"] = lambda x: _s2.S2LatLng_FromRadians
    if _newclass:
        FromRadians = staticmethod(_s2.S2LatLng_FromRadians)
    __swig_getmethods__["FromDegrees"] = lambda x: _s2.S2LatLng_FromDegrees
    if _newclass:
        FromDegrees = staticmethod(_s2.S2LatLng_FromDegrees)
    __swig_getmethods__["FromE5"] = lambda x: _s2.S2LatLng_FromE5
    if _newclass:
        FromE5 = staticmethod(_s2.S2LatLng_FromE5)
    __swig_getmethods__["FromE6"] = lambda x: _s2.S2LatLng_FromE6
    if _newclass:
        FromE6 = staticmethod(_s2.S2LatLng_FromE6)
    __swig_getmethods__["FromE7"] = lambda x: _s2.S2LatLng_FromE7
    if _newclass:
        FromE7 = staticmethod(_s2.S2LatLng_FromE7)
    __swig_getmethods__["FromUnsignedE6"] = lambda x: _s2.S2LatLng_FromUnsignedE6
    if _newclass:
        FromUnsignedE6 = staticmethod(_s2.S2LatLng_FromUnsignedE6)
    __swig_getmethods__["FromUnsignedE7"] = lambda x: _s2.S2LatLng_FromUnsignedE7
    if _newclass:
        FromUnsignedE7 = staticmethod(_s2.S2LatLng_FromUnsignedE7)
    __swig_getmethods__["Latitude"] = lambda x: _s2.S2LatLng_Latitude
    if _newclass:
        Latitude = staticmethod(_s2.S2LatLng_Latitude)
    __swig_getmethods__["Longitude"] = lambda x: _s2.S2LatLng_Longitude
    if _newclass:
        Longitude = staticmethod(_s2.S2LatLng_Longitude)

    def lat(self):
        return _s2.S2LatLng_lat(self)

    def lng(self):
        return _s2.S2LatLng_lng(self)

    def coords(self):
        return _s2.S2LatLng_coords(self)

    def is_valid(self):
        return _s2.S2LatLng_is_valid(self)

    def Normalized(self):
        return _s2.S2LatLng_Normalized(self)

    def ToPoint(self):
        return _s2.S2LatLng_ToPoint(self)

    def GetDistance(self, o):
        return _s2.S2LatLng_GetDistance(self, o)

    def __eq__(self, o):
        return _s2.S2LatLng___eq__(self, o)

    def __ne__(self, o):
        return _s2.S2LatLng___ne__(self, o)

    def __lt__(self, o):
        return _s2.S2LatLng___lt__(self, o)

    def __gt__(self, o):
        return _s2.S2LatLng___gt__(self, o)

    def __le__(self, o):
        return _s2.S2LatLng___le__(self, o)

    def __ge__(self, o):
        return _s2.S2LatLng___ge__(self, o)

    def ApproxEquals(self, o, max_error=1e-15):
        return _s2.S2LatLng_ApproxEquals(self, o, max_error)

    def ToStringInDegrees(self, *args):
        return _s2.S2LatLng_ToStringInDegrees(self, *args)

    def __str__(self):
        return _s2.S2LatLng___str__(self)
    __swig_destroy__ = _s2.delete_S2LatLng
    __del__ = lambda self: None
S2LatLng_swigregister = _s2.S2LatLng_swigregister
S2LatLng_swigregister(S2LatLng)

def S2LatLng_Invalid():
    return _s2.S2LatLng_Invalid()
S2LatLng_Invalid = _s2.S2LatLng_Invalid

def S2LatLng_FromRadians(lat_radians, lng_radians):
    return _s2.S2LatLng_FromRadians(lat_radians, lng_radians)
S2LatLng_FromRadians = _s2.S2LatLng_FromRadians

def S2LatLng_FromDegrees(lat_degrees, lng_degrees):
    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)
S2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees

def S2LatLng_FromE5(lat_e5, lng_e5):
    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)
S2LatLng_FromE5 = _s2.S2LatLng_FromE5

def S2LatLng_FromE6(lat_e6, lng_e6):
    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)
S2LatLng_FromE6 = _s2.S2LatLng_FromE6

def S2LatLng_FromE7(lat_e7, lng_e7):
    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)
S2LatLng_FromE7 = _s2.S2LatLng_FromE7

def S2LatLng_FromUnsignedE6(lat_e6, lng_e6):
    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)
S2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6

def S2LatLng_FromUnsignedE7(lat_e7, lng_e7):
    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)
S2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7

def S2LatLng_Latitude(p):
    return _s2.S2LatLng_Latitude(p)
S2LatLng_Latitude = _s2.S2LatLng_Latitude

def S2LatLng_Longitude(p):
    return _s2.S2LatLng_Longitude(p)
S2LatLng_Longitude = _s2.S2LatLng_Longitude

class S2LatLngRect(S2Region):
    __swig_setmethods__ = {}
    for _s in [S2Region]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLngRect, name, value)
    __swig_getmethods__ = {}
    for _s in [S2Region]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLngRect, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _s2.new_S2LatLngRect(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_getmethods__["FromCenterSize"] = lambda x: _s2.S2LatLngRect_FromCenterSize
    if _newclass:
        FromCenterSize = staticmethod(_s2.S2LatLngRect_FromCenterSize)
    __swig_getmethods__["FromPoint"] = lambda x: _s2.S2LatLngRect_FromPoint
    if _newclass:
        FromPoint = staticmethod(_s2.S2LatLngRect_FromPoint)
    __swig_getmethods__["FromPointPair"] = lambda x: _s2.S2LatLngRect_FromPointPair
    if _newclass:
        FromPointPair = staticmethod(_s2.S2LatLngRect_FromPointPair)

    def lat_lo(self):
        return _s2.S2LatLngRect_lat_lo(self)

    def lat_hi(self):
        return _s2.S2LatLngRect_lat_hi(self)

    def lng_lo(self):
        return _s2.S2LatLngRect_lng_lo(self)

    def lng_hi(self):
        return _s2.S2LatLngRect_lng_hi(self)

    def lat(self):
        return _s2.S2LatLngRect_lat(self)

    def lng(self):
        return _s2.S2LatLngRect_lng(self)

    def mutable_lat(self):
        return _s2.S2LatLngRect_mutable_lat(self)

    def mutable_lng(self):
        return _s2.S2LatLngRect_mutable_lng(self)

    def lo(self):
        return _s2.S2LatLngRect_lo(self)

    def hi(self):
        return _s2.S2LatLngRect_hi(self)
    __swig_getmethods__["Empty"] = lambda x: _s2.S2LatLngRect_Empty
    if _newclass:
        Empty = staticmethod(_s2.S2LatLngRect_Empty)
    __swig_getmethods__["Full"] = lambda x: _s2.S2LatLngRect_Full
    if _newclass:
        Full = staticmethod(_s2.S2LatLngRect_Full)
    __swig_getmethods__["FullLat"] = lambda x: _s2.S2LatLngRect_FullLat
    if _newclass:
        FullLat = staticmethod(_s2.S2LatLngRect_FullLat)
    __swig_getmethods__["FullLng"] = lambda x: _s2.S2LatLngRect_FullLng
    if _newclass:
        FullLng = staticmethod(_s2.S2LatLngRect_FullLng)

    def is_valid(self):
        return _s2.S2LatLngRect_is_valid(self)

    def is_empty(self):
        return _s2.S2LatLngRect_is_empty(self)

    def is_full(self):
        return _s2.S2LatLngRect_is_full(self)

    def is_point(self):
        return _s2.S2LatLngRect_is_point(self)

    def is_inverted(self):
        return _s2.S2LatLngRect_is_inverted(self)

    def GetVertex(self, k):
        return _s2.S2LatLngRect_GetVertex(self, k)

    def GetCenter(self):
        return _s2.S2LatLngRect_GetCenter(self)

    def GetSize(self):
        return _s2.S2LatLngRect_GetSize(self)

    def Area(self):
        return _s2.S2LatLngRect_Area(self)

    def InteriorContains(self, *args):
        return _s2.S2LatLngRect_InteriorContains(self, *args)

    def Intersects(self, *args):
        return _s2.S2LatLngRect_Intersects(self, *args)

    def InteriorIntersects(self, other):
        return _s2.S2LatLngRect_InteriorIntersects(self, other)

    def AddPoint(self, *args):
        return _s2.S2LatLngRect_AddPoint(self, *args)

    def Expanded(self, margin):
        return _s2.S2LatLngRect_Expanded(self, margin)

    def Union(self, other):
        return _s2.S2LatLngRect_Union(self, other)

    def Intersection(self, other):
        return _s2.S2LatLngRect_Intersection(self, other)

    def ConvolveWithCap(self, angle):
        return _s2.S2LatLngRect_ConvolveWithCap(self, angle)

    def GetDistance(self, *args):
        return _s2.S2LatLngRect_GetDistance(self, *args)

    def GetDirectedHausdorffDistance(self, other):
        return _s2.S2LatLngRect_GetDirectedHausdorffDistance(self, other)

    def GetHausdorffDistance(self, other):
        return _s2.S2LatLngRect_GetHausdorffDistance(self, other)

    def __eq__(self, other):
        return _s2.S2LatLngRect___eq__(self, other)

    def __ne__(self, other):
        return _s2.S2LatLngRect___ne__(self, other)

    def ApproxEquals(self, other, max_error=1e-15):
        return _s2.S2LatLngRect_ApproxEquals(self, other, max_error)

    def Clone(self):
        return _s2.S2LatLngRect_Clone(self)

    def GetCapBound(self):
        return _s2.S2LatLngRect_GetCapBound(self)

    def GetRectBound(self):
        return _s2.S2LatLngRect_GetRectBound(self)

    def VirtualContainsPoint(self, p):
        return _s2.S2LatLngRect_VirtualContainsPoint(self, p)

    def MayIntersect(self, cell):
        return _s2.S2LatLngRect_MayIntersect(self, cell)

    def Contains(self, *args):
        return _s2.S2LatLngRect_Contains(self, *args)

    def Encode(self, encoder):
        return _s2.S2LatLngRect_Encode(self, encoder)

    def Decode(self, decoder):
        return _s2.S2LatLngRect_Decode(self, decoder)

    def __str__(self):
        return _s2.S2LatLngRect___str__(self)
    __swig_destroy__ = _s2.delete_S2LatLngRect
    __del__ = lambda self: None
S2LatLngRect_swigregister = _s2.S2LatLngRect_swigregister
S2LatLngRect_swigregister(S2LatLngRect)

def S2LatLngRect_FromCenterSize(center, size):
    return _s2.S2LatLngRect_FromCenterSize(center, size)
S2LatLngRect_FromCenterSize = _s2.S2LatLngRect_FromCenterSize

def S2LatLngRect_FromPoint(p):
    return _s2.S2LatLngRect_FromPoint(p)
S2LatLngRect_FromPoint = _s2.S2LatLngRect_FromPoint

def S2LatLngRect_FromPointPair(p1, p2):
    return _s2.S2LatLngRect_FromPointPair(p1, p2)
S2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair

def S2LatLngRect_Empty():
    return _s2.S2LatLngRect_Empty()
S2LatLngRect_Empty = _s2.S2LatLngRect_Empty

def S2LatLngRect_Full():
    return _s2.S2LatLngRect_Full()
S2LatLngRect_Full = _s2.S2LatLngRect_Full

def S2LatLngRect_FullLat():
    return _s2.S2LatLngRect_FullLat()
S2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat

def S2LatLngRect_FullLng():
    return _s2.S2LatLngRect_FullLng()
S2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng

class S2RegionCoverer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2RegionCoverer, name)
    __repr__ = _swig_repr
    kDefaultMaxCells = _s2.S2RegionCoverer_kDefaultMaxCells

    def __init__(self):
        this = _s2.new_S2RegionCoverer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _s2.delete_S2RegionCoverer
    __del__ = lambda self: None

    def set_min_level(self, min_level):
        return _s2.S2RegionCoverer_set_min_level(self, min_level)

    def set_max_level(self, max_level):
        return _s2.S2RegionCoverer_set_max_level(self, max_level)

    def min_level(self):
        return _s2.S2RegionCoverer_min_level(self)

    def max_level(self):
        return _s2.S2RegionCoverer_max_level(self)

    def set_level_mod(self, level_mod):
        return _s2.S2RegionCoverer_set_level_mod(self, level_mod)

    def level_mod(self):
        return _s2.S2RegionCoverer_level_mod(self)

    def set_max_cells(self, max_cells):
        return _s2.S2RegionCoverer_set_max_cells(self, max_cells)

    def max_cells(self):
        return _s2.S2RegionCoverer_max_cells(self)

    def GetCovering(self, region):
        return _s2.S2RegionCoverer_GetCovering(self, region)

    def GetInteriorCovering(self, region, interior):
        return _s2.S2RegionCoverer_GetInteriorCovering(self, region, interior)

    def GetCellUnion(self, region, covering):
        return _s2.S2RegionCoverer_GetCellUnion(self, region, covering)

    def GetInteriorCellUnion(self, region, interior):
        return _s2.S2RegionCoverer_GetInteriorCellUnion(self, region, interior)
    __swig_getmethods__["GetSimpleCovering"] = lambda x: _s2.S2RegionCoverer_GetSimpleCovering
    if _newclass:
        GetSimpleCovering = staticmethod(_s2.S2RegionCoverer_GetSimpleCovering)
S2RegionCoverer_swigregister = _s2.S2RegionCoverer_swigregister
S2RegionCoverer_swigregister(S2RegionCoverer)

def S2RegionCoverer_GetSimpleCovering(region, start, level):
    return _s2.S2RegionCoverer_GetSimpleCovering(region, start, level)
S2RegionCoverer_GetSimpleCovering = _s2.S2RegionCoverer_GetSimpleCovering

class S2Cell(S2Region):
    __swig_setmethods__ = {}
    for _s in [S2Region]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cell, name, value)
    __swig_getmethods__ = {}
    for _s in [S2Region]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, S2Cell, name)
    __repr__ = _swig_repr
    __swig_getmethods__["FromFacePosLevel"] = lambda x: _s2.S2Cell_FromFacePosLevel
    if _newclass:
        FromFacePosLevel = staticmethod(_s2.S2Cell_FromFacePosLevel)

    def __init__(self, *args):
        this = _s2.new_S2Cell(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def id(self):
        return _s2.S2Cell_id(self)

    def face(self):
        return _s2.S2Cell_face(self)

    def level(self):
        return _s2.S2Cell_level(self)

    def orientation(self):
        return _s2.S2Cell_orientation(self)

    def is_leaf(self):
        return _s2.S2Cell_is_leaf(self)

    def GetSizeIJ(self):
        return _s2.S2Cell_GetSizeIJ(self)

    def GetSizeST(self):
        return _s2.S2Cell_GetSizeST(self)

    def GetVertex(self, k):
        return _s2.S2Cell_GetVertex(self, k)

    def GetVertexRaw(self, k):
        return _s2.S2Cell_GetVertexRaw(self, k)

    def GetEdge(self, k):
        return _s2.S2Cell_GetEdge(self, k)

    def GetEdgeRaw(self, k):
        return _s2.S2Cell_GetEdgeRaw(self, k)

    def Subdivide(self, children):
        return _s2.S2Cell_Subdivide(self, children)

    def GetCenter(self):
        return _s2.S2Cell_GetCenter(self)

    def GetCenterRaw(self):
        return _s2.S2Cell_GetCenterRaw(self)

    def AverageArea(self, *args):
        return _s2.S2Cell_AverageArea(self, *args)

    def ApproxArea(self):
        return _s2.S2Cell_ApproxArea(self)

    def ExactArea(self):
        return _s2.S2Cell_ExactArea(self)

    def Clone(self):
        return _s2.S2Cell_Clone(self)

    def GetCapBound(self):
        return _s2.S2Cell_GetCapBound(self)

    def GetRectBound(self):
        return _s2.S2Cell_GetRectBound(self)

    def MayIntersect(self, cell):
        return _s2.S2Cell_MayIntersect(self, cell)

    def VirtualContainsPoint(self, p):
        return _s2.S2Cell_VirtualContainsPoint(self, p)

    def Contains(self, *args):
        return _s2.S2Cell_Contains(self, *args)

    def Encode(self, encoder):
        return _s2.S2Cell_Encode(self, encoder)

    def Decode(self, decoder):
        return _s2.S2Cell_Decode(self, decoder)
    __swig_destroy__ = _s2.delete_S2Cell
    __del__ = lambda self: None
S2Cell_swigregister = _s2.S2Cell_swigregister
S2Cell_swigregister(S2Cell)

def S2Cell_FromFacePosLevel(face, pos, level):
    return _s2.S2Cell_FromFacePosLevel(face, pos, level)
S2Cell_FromFacePosLevel = _s2.S2Cell_FromFacePosLevel

class S2CellUnion(S2Region):
    __swig_setmethods__ = {}
    for _s in [S2Region]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellUnion, name, value)
    __swig_getmethods__ = {}
    for _s in [S2Region]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, S2CellUnion, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _s2.new_S2CellUnion()
        try:
            self.this.append(this)
        except:
            self.this = this

    def Init(self, *args):
        return _s2.S2CellUnion_Init(self, *args)

    def InitSwap(self, cell_ids):
        return _s2.S2CellUnion_InitSwap(self, cell_ids)

    def InitRaw(self, *args):
        return _s2.S2CellUnion_InitRaw(self, *args)

    def InitRawSwap(self, cell_ids):
        return _s2.S2CellUnion_InitRawSwap(self, cell_ids)

    def Detach(self, cell_ids):
        return _s2.S2CellUnion_Detach(self, cell_ids)

    def num_cells(self):
        return _s2.S2CellUnion_num_cells(self)

    def cell_id(self, i):
        return _s2.S2CellUnion_cell_id(self, i)

    def cell_ids(self):
        return _s2.S2CellUnion_cell_ids(self)

    def Normalize(self):
        return _s2.S2CellUnion_Normalize(self)

    def Denormalize(self, min_level, level_mod):
        return _s2.S2CellUnion_Denormalize(self, min_level, level_mod)

    def Pack(self, excess=0):
        return _s2.S2CellUnion_Pack(self, excess)

    def Intersects(self, *args):
        return _s2.S2CellUnion_Intersects(self, *args)

    def GetUnion(self, x, y):
        return _s2.S2CellUnion_GetUnion(self, x, y)

    def GetDifference(self, x, y):
        return _s2.S2CellUnion_GetDifference(self, x, y)

    def GetIntersection(self, *args):
        return _s2.S2CellUnion_GetIntersection(self, *args)

    def Expand(self, *args):
        return _s2.S2CellUnion_Expand(self, *args)

    def InitFromRange(self, min_id, max_id):
        return _s2.S2CellUnion_InitFromRange(self, min_id, max_id)

    def LeafCellsCovered(self):
        return _s2.S2CellUnion_LeafCellsCovered(self)

    def AverageBasedArea(self):
        return _s2.S2CellUnion_AverageBasedArea(self)

    def ApproxArea(self):
        return _s2.S2CellUnion_ApproxArea(self)

    def ExactArea(self):
        return _s2.S2CellUnion_ExactArea(self)

    def Clone(self):
        return _s2.S2CellUnion_Clone(self)

    def GetCapBound(self):
        return _s2.S2CellUnion_GetCapBound(self)

    def GetRectBound(self):
        return _s2.S2CellUnion_GetRectBound(self)

    def MayIntersect(self, cell):
        return _s2.S2CellUnion_MayIntersect(self, cell)

    def VirtualContainsPoint(self, p):
        return _s2.S2CellUnion_VirtualContainsPoint(self, p)

    def Encode(self, encoder):
        return _s2.S2CellUnion_Encode(self, encoder)

    def Decode(self, decoder):
        return _s2.S2CellUnion_Decode(self, decoder)

    def Contains(self, *args):
        return _s2.S2CellUnion_Contains(self, *args)
    __swig_destroy__ = _s2.delete_S2CellUnion
    __del__ = lambda self: None
S2CellUnion_swigregister = _s2.S2CellUnion_swigregister
S2CellUnion_swigregister(S2CellUnion)

# This file is compatible with both classic and new-style classes.


