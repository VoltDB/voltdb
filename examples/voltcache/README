Volt Cache application
===========================

This example application demonstrates how to create a Memcache-like cache in VoltDB. It provides a sample protocol transalation between VoltCache and Memcached, allowing client applications using a Memcached client to run on VoltCache without any code change (Text Protocol only).

Many attributes of the application are customizable through arguments passed to the client, including:

  - How long the sample client runs
  - When to start recording performance statistics
  - How frequently to report those statistics
  - "Key" size
  - Minimum and Maximum "Value" size (Value sizes will be randomly distributed between min and max)
  - Percentage of transactions that are "Gets" (out of 100%, the rest are "Puts")
  - Store the "Value" as is (text), or compress the "Value" (compressible binary)

These attributes can be adjusted by modifying the arguments to the "benchmark" target in the run.sh script.

Logging
------------------------------------------------

This application supports logging using log4j and is delivered with log4j configuration files for both the client (log-client.xml) and server (log-server.xml).


Interpreting the Results
------------------------

While the "Volt Cache" application is designed with benchmarking in mind, it is essentially a network-bound application: you will generally find that you max-out your network bandwidth long before you reach "impressive" pure database throughput (TPS) numbers.

For a better feel for the type of performance VoltDB is capable of on your hardware, check out the "Voter" application sample.

For more on benchmarking and tips on application tuning, make sure you visit the VoltDB blog:
 - http://voltdb.com/search/node/benchmark
 - http://voltdb.com/search/node/tuning

run.sh actions described
---------------------

run.sh                : compile all Java clients and stored procedures, build the catalog, and start the server

run.sh srccompile     : compile all Java clients and stored procedures

run.sh server         : start the server

run.sh client         : start the client, [if needed, initialize the given number of key-value pairs (puts),] begin normal client processing (gets and puts)

run.sh catalog        : compile sources and build the catalog

run.sh clean             : remove compiled files

